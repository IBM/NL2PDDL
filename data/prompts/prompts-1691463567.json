[
  {
    "domain": "BLOCKS",
    "action": "put-down",
    "pddl": "(:action put-down\n    :parameters (?x - block)\n    :precondition (holding ?x)\n    :effect (and (not (holding ?x)) (clear ?x) (handempty) (ontable ?x))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "heavy-pack",
        "action": "pack-first"
      },
      {
        "domain": "Depot",
        "action": "Drive"
      },
      {
        "domain": "Rover",
        "action": "calibrate"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(heavier ?item1 - item ?item2 - item) : item1 is heavier than item2.\n(packed ?i - item) : item i is packed into the box.\n(unpacked ?i - item) : item i is unpacked from the box.\n(nothing-above ?i - item) : nothing is above item i in the box.\n(box-empty) : the box is empty.\n\nInput:\nThe action, \"pack-first\" will pack an item into the box if the box is empty.\n\nPDDL Action:\n(:action pack-first\n    :parameters (?item - item)\n    :precondition (box-empty)\n    :effect (and (not (box-empty)) (packed ?item) (nothing-above ?item) (not (unpacked ?item)))\n)Allowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Drive\" will drive a truck at a place y to a place z if the truck is at the location.\n\nPDDL Action:\n(:action Drive\n    :parameters (?x - truck ?y - place ?z - place)\n    :precondition (at ?x ?y)\n    :effect (and (not (at ?x ?y)) (at ?x ?z))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"calibrate\" will have a rover calibrate a camera for an objective at a waypoint .\n\nPDDL Action:\n(:action calibrate\n    :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n    :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w) (on_board ?i ?r))\n    :effect (calibrated ?i ?r)\n)\n\nAllowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"put-down\" will have the hand put down a block if the block is being held.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "BLOCKS",
    "action": "put-down",
    "pddl": "(:action put-down\n    :parameters (?x - block)\n    :precondition (holding ?x)\n    :effect (and (not (holding ?x)) (clear ?x) (handempty) (ontable ?x))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "Rover",
        "action": "drop"
      },
      {
        "domain": "Depot",
        "action": "Drive"
      },
      {
        "domain": "logistics",
        "action": "UNLOAD-TRUCK"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"drop\" will empty any items in a store from a rover.\n\nPDDL Action:\n(:action drop\n    :parameters (?x - rover ?y - store)\n    :precondition (and (store_of ?y ?x) (full ?y))\n    :effect (and (not (full ?y)) (empty ?y))\n)Allowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Drive\" will drive a truck at a place y to a place z.\n\nPDDL Action:\n(:action Drive\n    :parameters (?x - truck ?y - place ?z - place)\n    :precondition (at ?x ?y)\n    :effect (and (not (at ?x ?y)) (at ?x ?z))\n)Allowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"UNLOAD-TRUCK\" will unload a package from a truck at a given place.\n\nPDDL Action:\n(:action UNLOAD-TRUCK\n    :parameters (?pkg - package ?truck - truck ?loc - place)\n    :precondition (and (at ?truck ?loc) (in ?pkg ?truck))\n    :effect (and (not (in ?pkg ?truck)) (at ?pkg ?loc))\n)\n\nAllowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"put-down\" will have the hand put down a block.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "BLOCKS",
    "action": "pick-up",
    "pddl": "(:action pick-up\n    :parameters (?x - block)\n    :precondition (and (clear ?x) (ontable ?x) (handempty))\n    :effect (and (not (ontable ?x)) (not (clear ?x)) (not (handempty)) (holding ?x))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "hiking",
        "action": "walk"
      },
      {
        "domain": "trapnewspapers",
        "action": "move"
      },
      {
        "domain": "logistics",
        "action": "LOAD-TRUCK"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?loc - location) : the hikers are at the location loc.\n(isWater ?loc - location) : the location loc is water.\n(isHill ?loc - location) : the location loc is a hill.\n(adjacent ?loc1 - location ?loc2 - location) : location loc1 is adjacent to location loc2.\n(onTrail ?from - location ?to - location) : the hikers are on the trail from location from to location to.\n\nInput:\nThe action, \"walk\" will have the hikers at a location walk to another location. if the hikers are at the first location.\n\nPDDL Action:\n(:action walk\n    :parameters (?from - location ?to - location)\n    :precondition (and (not (isHill ?to)) (at ?from) (adjacent ?from ?to) (not (isWater ?from)))\n    :effect (and (at ?to) (not (at ?from)))\n)Allowed Predicates:\n(at ?loc - location) : the deliverer is at location loc. \n(isHomeBase ?loc - location) : the location loc is the home base of the deliverer.\n(satisfied ?loc - location) : the location loc is satisfied.\n(wantsPaper ?loc - location) : the location loc wants a paper.\n(safe ?loc - location) : the location loc is safe.\n(unpacked ?p - paper) : the paper p is unpacked.\n(carrying ?p - paper) : the paper p is being carried.\n\nInput:\nThe action, \"move\" will move the deliverer from a location \"from\" to a location \"to\" if the deliverer is at the \"from\" location.\n\nPDDL Action:\n(:action move\n    :parameters (?from - location ?to - location)\n    :precondition (and (at ?from) (safe ?from))\n    :effect (and (not (at ?from)) (at ?to))\n)Allowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"LOAD-TRUCK\" will place a package in a truck at a given place if the package is at the place.\n\nPDDL Action:\n(:action LOAD-TRUCK\n    :parameters (?pkg - package ?truck - truck ?loc - place)\n    :precondition (and (at ?truck ?loc) (at ?pkg ?loc))\n    :effect (and (not (at ?pkg ?loc)) (in ?pkg ?truck))\n)\n\nAllowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"pick-up\" will have the hand pick up a block if the block is on the table clear and the hand is empty.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "BLOCKS",
    "action": "pick-up",
    "pddl": "(:action pick-up\n    :parameters (?x - block)\n    :precondition (and (clear ?x) (ontable ?x) (handempty))\n    :effect (and (not (ontable ?x)) (not (clear ?x)) (not (handempty)) (holding ?x))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "Rover",
        "action": "communicate_image_data"
      },
      {
        "domain": "Rover",
        "action": "calibrate"
      },
      {
        "domain": "Rover",
        "action": "communicate_soil_data"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_image_data\" will have a rover at a waypoint x comunicate image data taken in a mode about an objective via a lander at a waypoint y.\n\nPDDL Action:\n(:action communicate_image_data\n    :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_image ?r ?o ?m) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_image_data ?o ?m) (available ?r))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"calibrate\" will have a rover calibrate a camera for an objective at a waypoint.\n\nPDDL Action:\n(:action calibrate\n    :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n    :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w) (on_board ?i ?r))\n    :effect (calibrated ?i ?r)\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_soil_data\" will have a rover at a waypoint x comunicate soil data about a waypoint p via a lander at another waypoint y.\n\nPDDL Action:\n(:action communicate_soil_data\n    :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_soil_analysis ?r ?p) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_soil_data ?p) (available ?r))\n)\n\nAllowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"pick-up\" will have the hand pick up a block.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "BLOCKS",
    "action": "unstack",
    "pddl": "(:action unstack\n    :parameters (?x - block ?y - block)\n    :precondition (and (on ?x ?y) (clear ?x) (handempty))\n    :effect (and (holding ?x) (clear ?y) (not (clear ?x)) (not (handempty)) (not (on ?x ?y)))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "Depot",
        "action": "Drive"
      },
      {
        "domain": "Rover",
        "action": "drop"
      },
      {
        "domain": "Rover",
        "action": "calibrate"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Drive\" will drive a truck at a place y to a place z if the truck is at the location.\n\nPDDL Action:\n(:action Drive\n    :parameters (?x - truck ?y - place ?z - place)\n    :precondition (at ?x ?y)\n    :effect (and (not (at ?x ?y)) (at ?x ?z))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"drop\" will empty any items in a store from a rover if the store is full.\n\nPDDL Action:\n(:action drop\n    :parameters (?x - rover ?y - store)\n    :precondition (and (store_of ?y ?x) (full ?y))\n    :effect (and (not (full ?y)) (empty ?y))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"calibrate\" will have a rover calibrate a camera for an objective at a waypoint .\n\nPDDL Action:\n(:action calibrate\n    :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n    :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w) (on_board ?i ?r))\n    :effect (calibrated ?i ?r)\n)\n\nAllowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"unstack\" will unstack a block x from a block y if the block x is clear, ontop of y, and the hand is empty.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "BLOCKS",
    "action": "unstack",
    "pddl": "(:action unstack\n    :parameters (?x - block ?y - block)\n    :precondition (and (on ?x ?y) (clear ?x) (handempty))\n    :effect (and (holding ?x) (clear ?y) (not (clear ?x)) (not (handempty)) (not (on ?x ?y)))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "heavy-pack",
        "action": "stack"
      },
      {
        "domain": "trapnewspapers",
        "action": "move"
      },
      {
        "domain": "gripper-typed",
        "action": "pick"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(heavier ?item1 - item ?item2 - item) : item1 is heavier than item2.\n(packed ?i - item) : item i is packed into the box.\n(unpacked ?i - item) : item i is unpacked from the box.\n(nothing-above ?i - item) : nothing is above item i in the box.\n(box-empty) : the box is empty.\n\nInput:\nThe action, \"stack\" will stack an item ontop of another item in the box.\n\nPDDL Action:\n(:action stack\n    :parameters (?bottom - item ?top - item)\n    :precondition (and (packed ?bottom) (nothing-above ?bottom) (heavier ?bottom ?top) (unpacked ?top))\n    :effect (and (packed ?top) (nothing-above ?top) (not (nothing-above ?bottom)) (not (unpacked ?top)))\n)Allowed Predicates:\n(at ?loc - location) : the deliverer is at location loc. \n(isHomeBase ?loc - location) : the location loc is the home base of the deliverer.\n(satisfied ?loc - location) : the location loc is satisfied.\n(wantsPaper ?loc - location) : the location loc wants a paper.\n(safe ?loc - location) : the location loc is safe.\n(unpacked ?p - paper) : the paper p is unpacked.\n(carrying ?p - paper) : the paper p is being carried.\n\nInput:\nThe action, \"move\" will move the deliverer from a location \"from\" to a location \"to\".\n\nPDDL Action:\n(:action move\n    :parameters (?from - location ?to - location)\n    :precondition (and (at ?from) (safe ?from))\n    :effect (and (not (at ?from)) (at ?to))\n)Allowed Predicates:\n(at-robby ?r - room) : the robot robby is at the room r.\n(at ?b - ball ?r - room) : the ball b is at the room r.\n(free ?g - gripper) : the gripper g is free.\n(carry ?o - ball ?g - gripper) : gripper g is carrying ball g.\n\nInput:\nThe action, \"pick\" will have the robot pick up a ball in a room using a gripper.\n\nPDDL Action:\n(:action pick\n    :parameters (?obj - ball ?room - room ?gripper - gripper)\n    :precondition (and (at ?obj ?room) (at-robby ?room) (free ?gripper))\n    :effect (and (carry ?obj ?gripper) (not (at ?obj ?room)) (not (free ?gripper)))\n)\n\nAllowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"unstack\" will unstack a block x from a block y.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "BLOCKS",
    "action": "stack",
    "pddl": "(:action stack\n    :parameters (?x - block ?y - block)\n    :precondition (and (holding ?x) (clear ?y))\n    :effect (and (not (holding ?x)) (not (clear ?y)) (clear ?x) (handempty) (on ?x ?y))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "Rover",
        "action": "calibrate"
      },
      {
        "domain": "logistics",
        "action": "DRIVE-TRUCK"
      },
      {
        "domain": "heavy-pack",
        "action": "stack"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"calibrate\" will have a rover calibrate a camera for an objective at a waypoint .\n\nPDDL Action:\n(:action calibrate\n    :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n    :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w) (on_board ?i ?r))\n    :effect (calibrated ?i ?r)\n)Allowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"DRIVE-TRUCK\" will drive a truck from a location to another in a given city if the truck is at the first place.\n\nPDDL Action:\n(:action DRIVE-TRUCK\n    :parameters (?truck - truck ?loc-from - place ?loc-to - place ?city - city)\n    :precondition (and (at ?truck ?loc-from) (in-city ?loc-from ?city) (in-city ?loc-to ?city))\n    :effect (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to))\n)Allowed Predicates:\n(heavier ?item1 - item ?item2 - item) : item1 is heavier than item2.\n(packed ?i - item) : item i is packed into the box.\n(unpacked ?i - item) : item i is unpacked from the box.\n(nothing-above ?i - item) : nothing is above item i in the box.\n(box-empty) : the box is empty.\n\nInput:\nThe action, \"stack\" will stack an item ontop of another item in the box if nothing is above the item in the box and the item being placed ontop is unpacked.\n\nPDDL Action:\n(:action stack\n    :parameters (?bottom - item ?top - item)\n    :precondition (and (packed ?bottom) (nothing-above ?bottom) (heavier ?bottom ?top) (unpacked ?top))\n    :effect (and (packed ?top) (nothing-above ?top) (not (nothing-above ?bottom)) (not (unpacked ?top)))\n)\n\nAllowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"stack\" will stack a block x onto block y if the block y is clear and the hand is holding the block x.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "BLOCKS",
    "action": "stack",
    "pddl": "(:action stack\n    :parameters (?x - block ?y - block)\n    :precondition (and (holding ?x) (clear ?y))\n    :effect (and (not (holding ?x)) (not (clear ?y)) (clear ?x) (handempty) (on ?x ?y))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "track-building",
        "action": "build-track"
      },
      {
        "domain": "Rover",
        "action": "communicate_image_data"
      },
      {
        "domain": "hiking",
        "action": "climb"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"build-track\" will build track at a location.\n\nPDDL Action:\n(:action build-track\n    :parameters (?loc - location)\n    :precondition (agent-at ?loc)\n    :effect (and (has-track ?loc))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_image_data\" will have a rover at a waypoint x comunicate image data taken in a mode about an objective via a lander at a waypoint y.\n\nPDDL Action:\n(:action communicate_image_data\n    :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_image ?r ?o ?m) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_image_data ?o ?m) (available ?r))\n)Allowed Predicates:\n(at ?loc - location) : the hikers are at the location loc.\n(isWater ?loc - location) : the location loc is water.\n(isHill ?loc - location) : the location loc is a hill.\n(adjacent ?loc1 - location ?loc2 - location) : location loc1 is adjacent to location loc2.\n(onTrail ?from - location ?to - location) : the hikers are on the trail from location from to location to.\n\nInput:\nThe action, \"climb\" will have the hikers at a location climb to another location..\n\nPDDL Action:\n(:action climb\n    :parameters (?from - location ?to - location)\n    :precondition (and (isHill ?to) (at ?from) (adjacent ?from ?to) (not (isWater ?from)))\n    :effect (and (at ?to) (not (at ?from)))\n)\n\nAllowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"stack\" will stack a block x onto block y.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Depot",
    "action": "Drive",
    "pddl": "(:action Drive\n    :parameters (?x - truck ?y - place ?z - place)\n    :precondition (at ?x ?y)\n    :effect (and (not (at ?x ?y)) (at ?x ?z))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "logistics",
        "action": "FLY-AIRPLANE"
      },
      {
        "domain": "trapnewspapers",
        "action": "deliver"
      },
      {
        "domain": "Rover",
        "action": "communicate_soil_data"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"FLY-AIRPLANE\" will fly an airplane from one airport to another if the airplane is at the first airport.\n\nPDDL Action:\n(:action FLY-AIRPLANE\n    :parameters (?airplane - airplane ?loc-from - airport ?loc-to - airport)\n    :precondition (at ?airplane ?loc-from)\n    :effect (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to))\n)Allowed Predicates:\n(at ?loc - location) : the deliverer is at location loc. \n(isHomeBase ?loc - location) : the location loc is the home base of the deliverer.\n(satisfied ?loc - location) : the location loc is satisfied.\n(wantsPaper ?loc - location) : the location loc wants a paper.\n(safe ?loc - location) : the location loc is safe.\n(unpacked ?p - paper) : the paper p is unpacked.\n(carrying ?p - paper) : the paper p is being carried.\n\nInput:\nThe action, \"deliver\" will have the deliverer drop off a paper in a location if the deliverer is carrying the paper.\n\nPDDL Action:\n(:action deliver\n    :parameters (?paper - paper ?loc - location)\n    :precondition (and (at ?loc) (carrying ?paper))\n    :effect (and (not (carrying ?paper)) (not (wantsPaper ?loc)) (satisfied ?loc))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_soil_data\" will have a rover at a waypoint x comunicate soil data about a waypoint p via a lander at another waypoint y if the rover is available and the lander has a free channel.\n\nPDDL Action:\n(:action communicate_soil_data\n    :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_soil_analysis ?r ?p) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_soil_data ?p) (available ?r))\n)\n\nAllowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Drive\" will drive a truck at a place y to a place z if the truck is at the location.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Depot",
    "action": "Drive",
    "pddl": "(:action Drive\n    :parameters (?x - truck ?y - place ?z - place)\n    :precondition (at ?x ?y)\n    :effect (and (not (at ?x ?y)) (at ?x ?z))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "logistics",
        "action": "DRIVE-TRUCK"
      },
      {
        "domain": "Rover",
        "action": "communicate_image_data"
      },
      {
        "domain": "trapnewspapers",
        "action": "pick-up"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"DRIVE-TRUCK\" will drive a truck from a location to another in a given city.\n\nPDDL Action:\n(:action DRIVE-TRUCK\n    :parameters (?truck - truck ?loc-from - place ?loc-to - place ?city - city)\n    :precondition (and (at ?truck ?loc-from) (in-city ?loc-from ?city) (in-city ?loc-to ?city))\n    :effect (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_image_data\" will have a rover at a waypoint x comunicate image data taken in a mode about an objective via a lander at a waypoint y.\n\nPDDL Action:\n(:action communicate_image_data\n    :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_image ?r ?o ?m) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_image_data ?o ?m) (available ?r))\n)Allowed Predicates:\n(at ?loc - location) : the deliverer is at location loc. \n(isHomeBase ?loc - location) : the location loc is the home base of the deliverer.\n(satisfied ?loc - location) : the location loc is satisfied.\n(wantsPaper ?loc - location) : the location loc wants a paper.\n(safe ?loc - location) : the location loc is safe.\n(unpacked ?p - paper) : the paper p is unpacked.\n(carrying ?p - paper) : the paper p is being carried.\n\nInput:\nThe action, \"pick-up\" will have the deliverer pick up a paper at a location.\n\nPDDL Action:\n(:action pick-up\n    :parameters (?paper - paper ?loc - location)\n    :precondition (and (at ?loc) (isHomeBase ?loc) (unpacked ?paper))\n    :effect (and (not (unpacked ?paper)) (carrying ?paper))\n)\n\nAllowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Drive\" will drive a truck at a place y to a place z.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Depot",
    "action": "Load",
    "pddl": "(:action Load\n    :parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))\n    :effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "heavy-pack",
        "action": "stack"
      },
      {
        "domain": "trapnewspapers",
        "action": "move"
      },
      {
        "domain": "logistics",
        "action": "FLY-AIRPLANE"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(heavier ?item1 - item ?item2 - item) : item1 is heavier than item2.\n(packed ?i - item) : item i is packed into the box.\n(unpacked ?i - item) : item i is unpacked from the box.\n(nothing-above ?i - item) : nothing is above item i in the box.\n(box-empty) : the box is empty.\n\nInput:\nThe action, \"stack\" will stack an item ontop of another item in the box if nothing is above the item in the box and the item being placed ontop is unpacked.\n\nPDDL Action:\n(:action stack\n    :parameters (?bottom - item ?top - item)\n    :precondition (and (packed ?bottom) (nothing-above ?bottom) (heavier ?bottom ?top) (unpacked ?top))\n    :effect (and (packed ?top) (nothing-above ?top) (not (nothing-above ?bottom)) (not (unpacked ?top)))\n)Allowed Predicates:\n(at ?loc - location) : the deliverer is at location loc. \n(isHomeBase ?loc - location) : the location loc is the home base of the deliverer.\n(satisfied ?loc - location) : the location loc is satisfied.\n(wantsPaper ?loc - location) : the location loc wants a paper.\n(safe ?loc - location) : the location loc is safe.\n(unpacked ?p - paper) : the paper p is unpacked.\n(carrying ?p - paper) : the paper p is being carried.\n\nInput:\nThe action, \"move\" will move the deliverer from a location \"from\" to a location \"to\" if the deliverer is at the \"from\" location.\n\nPDDL Action:\n(:action move\n    :parameters (?from - location ?to - location)\n    :precondition (and (at ?from) (safe ?from))\n    :effect (and (not (at ?from)) (at ?to))\n)Allowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"FLY-AIRPLANE\" will fly an airplane from one airport to another if the airplane is at the first airport.\n\nPDDL Action:\n(:action FLY-AIRPLANE\n    :parameters (?airplane - airplane ?loc-from - airport ?loc-to - airport)\n    :precondition (at ?airplane ?loc-from)\n    :effect (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to))\n)\n\nAllowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Load\" will use a hoist to load a crate into a truck at a place if the hoist is lifting the crate.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Depot",
    "action": "Load",
    "pddl": "(:action Load\n    :parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))\n    :effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "logistics",
        "action": "UNLOAD-AIRPLANE"
      },
      {
        "domain": "trapnewspapers",
        "action": "move"
      },
      {
        "domain": "BLOCKS",
        "action": "pick-up"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"UNLOAD-AIRPLANE\" will unload a package from an airplane at a given place.\n\nPDDL Action:\n(:action UNLOAD-AIRPLANE\n    :parameters (?pkg - package ?airplane - airplane ?loc - place)\n    :precondition (and (in ?pkg ?airplane) (at ?airplane ?loc))\n    :effect (and (not (in ?pkg ?airplane)) (at ?pkg ?loc))\n)Allowed Predicates:\n(at ?loc - location) : the deliverer is at location loc. \n(isHomeBase ?loc - location) : the location loc is the home base of the deliverer.\n(satisfied ?loc - location) : the location loc is satisfied.\n(wantsPaper ?loc - location) : the location loc wants a paper.\n(safe ?loc - location) : the location loc is safe.\n(unpacked ?p - paper) : the paper p is unpacked.\n(carrying ?p - paper) : the paper p is being carried.\n\nInput:\nThe action, \"move\" will move the deliverer from a location \"from\" to a location \"to\".\n\nPDDL Action:\n(:action move\n    :parameters (?from - location ?to - location)\n    :precondition (and (at ?from) (safe ?from))\n    :effect (and (not (at ?from)) (at ?to))\n)Allowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"pick-up\" will have the hand pick up a block.\n\nPDDL Action:\n(:action pick-up\n    :parameters (?x - block)\n    :precondition (and (clear ?x) (ontable ?x) (handempty))\n    :effect (and (not (ontable ?x)) (not (clear ?x)) (not (handempty)) (holding ?x))\n)\n\nAllowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Load\" will use a hoist to load a crate into a truck at a place.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Depot",
    "action": "Drop",
    "pddl": "(:action Drop\n    :parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n    :effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y) (on ?y ?z))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "Rover",
        "action": "take_image"
      },
      {
        "domain": "hiking",
        "action": "climb"
      },
      {
        "domain": "miconic",
        "action": "depart"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"take_image\" will have a rover at a waypoint take an image of an objective in a mode if the camera is calibrated by the rover.\n\nPDDL Action:\n(:action take_image\n    :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n    :precondition (and (calibrated ?i ?r) (on_board ?i ?r) (equipped_for_imaging ?r) (supports ?i ?m) (visible_from ?o ?p) (at ?r ?p))\n    :effect (and (have_image ?r ?o ?m) (not (calibrated ?i ?r)))\n)Allowed Predicates:\n(at ?loc - location) : the hikers are at the location loc.\n(isWater ?loc - location) : the location loc is water.\n(isHill ?loc - location) : the location loc is a hill.\n(adjacent ?loc1 - location ?loc2 - location) : location loc1 is adjacent to location loc2.\n(onTrail ?from - location ?to - location) : the hikers are on the trail from location from to location to.\n\nInput:\nThe action, \"climb\" will have the hikers at a location climb to another location. if the hikers are at the first location.\n\nPDDL Action:\n(:action climb\n    :parameters (?from - location ?to - location)\n    :precondition (and (isHill ?to) (at ?from) (adjacent ?from ?to) (not (isWater ?from)))\n    :effect (and (at ?to) (not (at ?from)))\n)Allowed Predicates:\n(origin ?p - passenger ?f - floor) : passenger p starts on floor f.\n(destin ?p - passenger ?f - floor) : passenger p has floor f as their destination. \n(above ?f1 - floor  ?f2 - floor) : floor f1 is above floor f2.\n(boarded ?p - passenger) : passenger p has boarded the lift.\n(served ?p - passenger) : passenger p has been served by the lift.\n(lift-at ?f - floor) : the lift is at floor f.\n\nInput:\nThe action, \"depart\" will have a passenger depart the lift at a floor if the passanger has boarded the lift.\n\nPDDL Action:\n(:action depart\n    :parameters (?f - floor ?p - passenger)\n    :precondition (and (lift-at ?f) (destin ?p ?f) (boarded ?p))\n    :effect (and (not (boarded ?p)) (served ?p))\n)\n\nAllowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Drop\" will have a hoist drop a crate onto a surface at a place if the hoist is lifting the crate and the surface is clear.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Depot",
    "action": "Drop",
    "pddl": "(:action Drop\n    :parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n    :effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y) (on ?y ?z))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "BLOCKS",
        "action": "unstack"
      },
      {
        "domain": "BLOCKS",
        "action": "stack"
      },
      {
        "domain": "gripper-typed",
        "action": "drop"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"unstack\" will unstack a block x from a block y.\n\nPDDL Action:\n(:action unstack\n    :parameters (?x - block ?y - block)\n    :precondition (and (on ?x ?y) (clear ?x) (handempty))\n    :effect (and (holding ?x) (clear ?y) (not (clear ?x)) (not (handempty)) (not (on ?x ?y)))\n)Allowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"stack\" will stack a block x onto block y.\n\nPDDL Action:\n(:action stack\n    :parameters (?x - block ?y - block)\n    :precondition (and (holding ?x) (clear ?y))\n    :effect (and (not (holding ?x)) (not (clear ?y)) (clear ?x) (handempty) (on ?x ?y))\n)Allowed Predicates:\n(at-robby ?r - room) : the robot robby is at the room r.\n(at ?b - ball ?r - room) : the ball b is at the room r.\n(free ?g - gripper) : the gripper g is free.\n(carry ?o - ball ?g - gripper) : gripper g is carrying ball g.\n\nInput:\nThe action, \"drop\" will drop a ball in a room using a gripper.\n\nPDDL Action:\n(:action drop\n    :parameters (?obj - ball ?room - room ?gripper - gripper)\n    :precondition (and (carry ?obj ?gripper) (at-robby ?room))\n    :effect (and (at ?obj ?room) (free ?gripper) (not (carry ?obj ?gripper)))\n)\n\nAllowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Drop\" will have a hoist drop a crate onto a surface at a place.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Depot",
    "action": "Lift",
    "pddl": "(:action Lift\n    :parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n    :precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n    :effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) (clear ?z) (not (on ?y ?z)))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "gripper-typed",
        "action": "drop"
      },
      {
        "domain": "BLOCKS",
        "action": "pick-up"
      },
      {
        "domain": "BLOCKS",
        "action": "put-down"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at-robby ?r - room) : the robot robby is at the room r.\n(at ?b - ball ?r - room) : the ball b is at the room r.\n(free ?g - gripper) : the gripper g is free.\n(carry ?o - ball ?g - gripper) : gripper g is carrying ball g.\n\nInput:\nThe action, \"drop\" will drop a ball in a room using a gripper if the ball is being caried by the gripper.\n\nPDDL Action:\n(:action drop\n    :parameters (?obj - ball ?room - room ?gripper - gripper)\n    :precondition (and (carry ?obj ?gripper) (at-robby ?room))\n    :effect (and (at ?obj ?room) (free ?gripper) (not (carry ?obj ?gripper)))\n)Allowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"pick-up\" will have the hand pick up a block if the block is on the table clear and the hand is empty.\n\nPDDL Action:\n(:action pick-up\n    :parameters (?x - block)\n    :precondition (and (clear ?x) (ontable ?x) (handempty))\n    :effect (and (not (ontable ?x)) (not (clear ?x)) (not (handempty)) (holding ?x))\n)Allowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"put-down\" will have the hand put down a block if the block is being held.\n\nPDDL Action:\n(:action put-down\n    :parameters (?x - block)\n    :precondition (holding ?x)\n    :effect (and (not (holding ?x)) (clear ?x) (handempty) (ontable ?x))\n)\n\nAllowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Lift\" will have a hoist lift a crate from a surface at a place if the crate is on the surface, clear, and at the location and the hoist is available.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Depot",
    "action": "Lift",
    "pddl": "(:action Lift\n    :parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n    :precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n    :effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) (clear ?z) (not (on ?y ?z)))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "miconic",
        "action": "depart"
      },
      {
        "domain": "track-building",
        "action": "build-track"
      },
      {
        "domain": "BLOCKS",
        "action": "unstack"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(origin ?p - passenger ?f - floor) : passenger p starts on floor f.\n(destin ?p - passenger ?f - floor) : passenger p has floor f as their destination. \n(above ?f1 - floor  ?f2 - floor) : floor f1 is above floor f2.\n(boarded ?p - passenger) : passenger p has boarded the lift.\n(served ?p - passenger) : passenger p has been served by the lift.\n(lift-at ?f - floor) : the lift is at floor f.\n\nInput:\nThe action, \"depart\" will have a passenger depart the lift at a floor.\n\nPDDL Action:\n(:action depart\n    :parameters (?f - floor ?p - passenger)\n    :precondition (and (lift-at ?f) (destin ?p ?f) (boarded ?p))\n    :effect (and (not (boarded ?p)) (served ?p))\n)Allowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"build-track\" will build track at a location.\n\nPDDL Action:\n(:action build-track\n    :parameters (?loc - location)\n    :precondition (agent-at ?loc)\n    :effect (and (has-track ?loc))\n)Allowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"unstack\" will unstack a block x from a block y.\n\nPDDL Action:\n(:action unstack\n    :parameters (?x - block ?y - block)\n    :precondition (and (on ?x ?y) (clear ?x) (handempty))\n    :effect (and (holding ?x) (clear ?y) (not (clear ?x)) (not (handempty)) (not (on ?x ?y)))\n)\n\nAllowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Lift\" will have a hoist lift a crate from a surface at a place.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Depot",
    "action": "Unload",
    "pddl": "(:action Unload\n    :parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n    :effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "logistics",
        "action": "UNLOAD-TRUCK"
      },
      {
        "domain": "track-building",
        "action": "move-agent"
      },
      {
        "domain": "BLOCKS",
        "action": "stack"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"UNLOAD-TRUCK\" will unload a package from a truck at a given place if the package is in the truck.\n\nPDDL Action:\n(:action UNLOAD-TRUCK\n    :parameters (?pkg - package ?truck - truck ?loc - place)\n    :precondition (and (at ?truck ?loc) (in ?pkg ?truck))\n    :effect (and (not (in ?pkg ?truck)) (at ?pkg ?loc))\n)Allowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"move-agent\" will move an agent from a location current-loc to a location next-loc if the agent is at the current location.\n\nPDDL Action:\n(:action move-agent\n    :parameters (?current-loc - location ?next-loc - location)\n    :precondition (agent-at ?current-loc)\n    :effect (and (agent-at ?next-loc) (not (agent-at ?current-loc)))\n)Allowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"stack\" will stack a block x onto block y if the block y is clear and the hand is holding the block x.\n\nPDDL Action:\n(:action stack\n    :parameters (?x - block ?y - block)\n    :precondition (and (holding ?x) (clear ?y))\n    :effect (and (not (holding ?x)) (not (clear ?y)) (clear ?x) (handempty) (on ?x ?y))\n)\n\nAllowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Unload\" will use a hoist to unload a crate from a truck at a place if the hoist is available and the crate is in the truck.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Depot",
    "action": "Unload",
    "pddl": "(:action Unload\n    :parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n    :effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "track-building",
        "action": "build-track"
      },
      {
        "domain": "trapnewspapers",
        "action": "move"
      },
      {
        "domain": "BLOCKS",
        "action": "pick-up"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"build-track\" will build track at a location.\n\nPDDL Action:\n(:action build-track\n    :parameters (?loc - location)\n    :precondition (agent-at ?loc)\n    :effect (and (has-track ?loc))\n)Allowed Predicates:\n(at ?loc - location) : the deliverer is at location loc. \n(isHomeBase ?loc - location) : the location loc is the home base of the deliverer.\n(satisfied ?loc - location) : the location loc is satisfied.\n(wantsPaper ?loc - location) : the location loc wants a paper.\n(safe ?loc - location) : the location loc is safe.\n(unpacked ?p - paper) : the paper p is unpacked.\n(carrying ?p - paper) : the paper p is being carried.\n\nInput:\nThe action, \"move\" will move the deliverer from a location \"from\" to a location \"to\".\n\nPDDL Action:\n(:action move\n    :parameters (?from - location ?to - location)\n    :precondition (and (at ?from) (safe ?from))\n    :effect (and (not (at ?from)) (at ?to))\n)Allowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"pick-up\" will have the hand pick up a block.\n\nPDDL Action:\n(:action pick-up\n    :parameters (?x - block)\n    :precondition (and (clear ?x) (ontable ?x) (handempty))\n    :effect (and (not (ontable ?x)) (not (clear ?x)) (not (handempty)) (holding ?x))\n)\n\nAllowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Unload\" will use a hoist to unload a crate from a truck at a place.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "gripper-typed",
    "action": "drop",
    "pddl": "(:action drop\n    :parameters (?obj - ball ?room - room ?gripper - gripper)\n    :precondition (and (carry ?obj ?gripper) (at-robby ?room))\n    :effect (and (at ?obj ?room) (free ?gripper) (not (carry ?obj ?gripper)))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "miconic",
        "action": "board"
      },
      {
        "domain": "logistics",
        "action": "LOAD-TRUCK"
      },
      {
        "domain": "trapnewspapers",
        "action": "pick-up"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(origin ?p - passenger ?f - floor) : passenger p starts on floor f.\n(destin ?p - passenger ?f - floor) : passenger p has floor f as their destination. \n(above ?f1 - floor  ?f2 - floor) : floor f1 is above floor f2.\n(boarded ?p - passenger) : passenger p has boarded the lift.\n(served ?p - passenger) : passenger p has been served by the lift.\n(lift-at ?f - floor) : the lift is at floor f.\n\nInput:\nThe action, \"board\" will have a passenger at a floor board the lift .\n\nPDDL Action:\n(:action board\n    :parameters (?f - floor ?p - passenger)\n    :precondition (and (lift-at ?f) (origin ?p ?f))\n    :effect (and (boarded ?p))\n)Allowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"LOAD-TRUCK\" will place a package in a truck at a given place if the package is at the place.\n\nPDDL Action:\n(:action LOAD-TRUCK\n    :parameters (?pkg - package ?truck - truck ?loc - place)\n    :precondition (and (at ?truck ?loc) (at ?pkg ?loc))\n    :effect (and (not (at ?pkg ?loc)) (in ?pkg ?truck))\n)Allowed Predicates:\n(at ?loc - location) : the deliverer is at location loc. \n(isHomeBase ?loc - location) : the location loc is the home base of the deliverer.\n(satisfied ?loc - location) : the location loc is satisfied.\n(wantsPaper ?loc - location) : the location loc wants a paper.\n(safe ?loc - location) : the location loc is safe.\n(unpacked ?p - paper) : the paper p is unpacked.\n(carrying ?p - paper) : the paper p is being carried.\n\nInput:\nThe action, \"pick-up\" will have the deliverer pick up a paper at a location if the paper is unpacked.\n\nPDDL Action:\n(:action pick-up\n    :parameters (?paper - paper ?loc - location)\n    :precondition (and (at ?loc) (isHomeBase ?loc) (unpacked ?paper))\n    :effect (and (not (unpacked ?paper)) (carrying ?paper))\n)\n\nAllowed Predicates:\n(at-robby ?r - room) : the robot robby is at the room r.\n(at ?b - ball ?r - room) : the ball b is at the room r.\n(free ?g - gripper) : the gripper g is free.\n(carry ?o - ball ?g - gripper) : gripper g is carrying ball g.\n\nInput:\nThe action, \"drop\" will drop a ball in a room using a gripper if the ball is being caried by the gripper.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "gripper-typed",
    "action": "drop",
    "pddl": "(:action drop\n    :parameters (?obj - ball ?room - room ?gripper - gripper)\n    :precondition (and (carry ?obj ?gripper) (at-robby ?room))\n    :effect (and (at ?obj ?room) (free ?gripper) (not (carry ?obj ?gripper)))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "track-building",
        "action": "build-track"
      },
      {
        "domain": "Rover",
        "action": "communicate_image_data"
      },
      {
        "domain": "Depot",
        "action": "Load"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"build-track\" will build track at a location.\n\nPDDL Action:\n(:action build-track\n    :parameters (?loc - location)\n    :precondition (agent-at ?loc)\n    :effect (and (has-track ?loc))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_image_data\" will have a rover at a waypoint x comunicate image data taken in a mode about an objective via a lander at a waypoint y.\n\nPDDL Action:\n(:action communicate_image_data\n    :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_image ?r ?o ?m) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_image_data ?o ?m) (available ?r))\n)Allowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Load\" will use a hoist to load a crate into a truck at a place.\n\nPDDL Action:\n(:action Load\n    :parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))\n    :effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x))\n)\n\nAllowed Predicates:\n(at-robby ?r - room) : the robot robby is at the room r.\n(at ?b - ball ?r - room) : the ball b is at the room r.\n(free ?g - gripper) : the gripper g is free.\n(carry ?o - ball ?g - gripper) : gripper g is carrying ball g.\n\nInput:\nThe action, \"drop\" will drop a ball in a room using a gripper.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "gripper-typed",
    "action": "move",
    "pddl": "(:action move\n    :parameters (?from - room ?to - room)\n    :precondition (at-robby ?from)\n    :effect (and (at-robby ?to) (not (at-robby ?from)))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "Rover",
        "action": "sample_rock"
      },
      {
        "domain": "BLOCKS",
        "action": "stack"
      },
      {
        "domain": "logistics",
        "action": "DRIVE-TRUCK"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"sample_rock\" will have a rover sample a rock into a store at a waypoint if the waypoint is at a rock sample and the store is empty.\n\nPDDL Action:\n(:action sample_rock\n    :parameters (?x - rover ?s - store ?p - waypoint)\n    :precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x) (empty ?s))\n    :effect (and (not (empty ?s)) (full ?s) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p)))\n)Allowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"stack\" will stack a block x onto block y if the block y is clear and the hand is holding the block x.\n\nPDDL Action:\n(:action stack\n    :parameters (?x - block ?y - block)\n    :precondition (and (holding ?x) (clear ?y))\n    :effect (and (not (holding ?x)) (not (clear ?y)) (clear ?x) (handempty) (on ?x ?y))\n)Allowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"DRIVE-TRUCK\" will drive a truck from a location to another in a given city if the truck is at the first place.\n\nPDDL Action:\n(:action DRIVE-TRUCK\n    :parameters (?truck - truck ?loc-from - place ?loc-to - place ?city - city)\n    :precondition (and (at ?truck ?loc-from) (in-city ?loc-from ?city) (in-city ?loc-to ?city))\n    :effect (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to))\n)\n\nAllowed Predicates:\n(at-robby ?r - room) : the robot robby is at the room r.\n(at ?b - ball ?r - room) : the ball b is at the room r.\n(free ?g - gripper) : the gripper g is free.\n(carry ?o - ball ?g - gripper) : gripper g is carrying ball g.\n\nInput:\nThe action, \"move\" will move the robot roby from a room to a new room if the robot robby is in the initial room.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "gripper-typed",
    "action": "move",
    "pddl": "(:action move\n    :parameters (?from - room ?to - room)\n    :precondition (at-robby ?from)\n    :effect (and (at-robby ?to) (not (at-robby ?from)))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "Rover",
        "action": "communicate_rock_data"
      },
      {
        "domain": "Depot",
        "action": "Lift"
      },
      {
        "domain": "track-building",
        "action": "move-agent"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_rock_data\" will have a rover at a waypoint x comunicate rock data about a waypoint p via a lander at another waypoint y.\n\nPDDL Action:\n(:action communicate_rock_data\n    :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_rock_analysis ?r ?p) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_rock_data ?p) (available ?r))\n)Allowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Lift\" will have a hoist lift a crate from a surface at a place.\n\nPDDL Action:\n(:action Lift\n    :parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n    :precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n    :effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) (clear ?z) (not (on ?y ?z)))\n)Allowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"move-agent\" will move an agent from a location current-loc to a location next-loc.\n\nPDDL Action:\n(:action move-agent\n    :parameters (?current-loc - location ?next-loc - location)\n    :precondition (agent-at ?current-loc)\n    :effect (and (agent-at ?next-loc) (not (agent-at ?current-loc)))\n)\n\nAllowed Predicates:\n(at-robby ?r - room) : the robot robby is at the room r.\n(at ?b - ball ?r - room) : the ball b is at the room r.\n(free ?g - gripper) : the gripper g is free.\n(carry ?o - ball ?g - gripper) : gripper g is carrying ball g.\n\nInput:\nThe action, \"move\" will move the robot roby from a room to a new room.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "gripper-typed",
    "action": "pick",
    "pddl": "(:action pick\n    :parameters (?obj - ball ?room - room ?gripper - gripper)\n    :precondition (and (at ?obj ?room) (at-robby ?room) (free ?gripper))\n    :effect (and (carry ?obj ?gripper) (not (at ?obj ?room)) (not (free ?gripper)))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "hiking",
        "action": "climb"
      },
      {
        "domain": "Depot",
        "action": "Lift"
      },
      {
        "domain": "logistics",
        "action": "LOAD-AIRPLANE"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?loc - location) : the hikers are at the location loc.\n(isWater ?loc - location) : the location loc is water.\n(isHill ?loc - location) : the location loc is a hill.\n(adjacent ?loc1 - location ?loc2 - location) : location loc1 is adjacent to location loc2.\n(onTrail ?from - location ?to - location) : the hikers are on the trail from location from to location to.\n\nInput:\nThe action, \"climb\" will have the hikers at a location climb to another location. if the hikers are at the first location.\n\nPDDL Action:\n(:action climb\n    :parameters (?from - location ?to - location)\n    :precondition (and (isHill ?to) (at ?from) (adjacent ?from ?to) (not (isWater ?from)))\n    :effect (and (at ?to) (not (at ?from)))\n)Allowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Lift\" will have a hoist lift a crate from a surface at a place if the crate is on the surface, clear, and at the location and the hoist is available.\n\nPDDL Action:\n(:action Lift\n    :parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n    :precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n    :effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) (clear ?z) (not (on ?y ?z)))\n)Allowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"LOAD-AIRPLANE\" will load an airplane with a package at a given place if the package is at the location.\n\nPDDL Action:\n(:action LOAD-AIRPLANE\n    :parameters (?pkg - package ?airplane - airplane ?loc - place)\n    :precondition (and (at ?pkg ?loc) (at ?airplane ?loc))\n    :effect (and (not (at ?pkg ?loc)) (in ?pkg ?airplane))\n)\n\nAllowed Predicates:\n(at-robby ?r - room) : the robot robby is at the room r.\n(at ?b - ball ?r - room) : the ball b is at the room r.\n(free ?g - gripper) : the gripper g is free.\n(carry ?o - ball ?g - gripper) : gripper g is carrying ball g.\n\nInput:\nThe action, \"pick\" will have the robot pick up a ball in a room using a gripper if the gripper is free and the ball is in the room.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "gripper-typed",
    "action": "pick",
    "pddl": "(:action pick\n    :parameters (?obj - ball ?room - room ?gripper - gripper)\n    :precondition (and (at ?obj ?room) (at-robby ?room) (free ?gripper))\n    :effect (and (carry ?obj ?gripper) (not (at ?obj ?room)) (not (free ?gripper)))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "Depot",
        "action": "Drive"
      },
      {
        "domain": "logistics",
        "action": "LOAD-AIRPLANE"
      },
      {
        "domain": "hiking",
        "action": "walk"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Drive\" will drive a truck at a place y to a place z.\n\nPDDL Action:\n(:action Drive\n    :parameters (?x - truck ?y - place ?z - place)\n    :precondition (at ?x ?y)\n    :effect (and (not (at ?x ?y)) (at ?x ?z))\n)Allowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"LOAD-AIRPLANE\" will load an airplane with a package at a given place.\n\nPDDL Action:\n(:action LOAD-AIRPLANE\n    :parameters (?pkg - package ?airplane - airplane ?loc - place)\n    :precondition (and (at ?pkg ?loc) (at ?airplane ?loc))\n    :effect (and (not (at ?pkg ?loc)) (in ?pkg ?airplane))\n)Allowed Predicates:\n(at ?loc - location) : the hikers are at the location loc.\n(isWater ?loc - location) : the location loc is water.\n(isHill ?loc - location) : the location loc is a hill.\n(adjacent ?loc1 - location ?loc2 - location) : location loc1 is adjacent to location loc2.\n(onTrail ?from - location ?to - location) : the hikers are on the trail from location from to location to.\n\nInput:\nThe action, \"walk\" will have the hikers at a location walk to another location..\n\nPDDL Action:\n(:action walk\n    :parameters (?from - location ?to - location)\n    :precondition (and (not (isHill ?to)) (at ?from) (adjacent ?from ?to) (not (isWater ?from)))\n    :effect (and (at ?to) (not (at ?from)))\n)\n\nAllowed Predicates:\n(at-robby ?r - room) : the robot robby is at the room r.\n(at ?b - ball ?r - room) : the ball b is at the room r.\n(free ?g - gripper) : the gripper g is free.\n(carry ?o - ball ?g - gripper) : gripper g is carrying ball g.\n\nInput:\nThe action, \"pick\" will have the robot pick up a ball in a room using a gripper.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "heavy-pack",
    "action": "pack-first",
    "pddl": "(:action pack-first\n    :parameters (?item - item)\n    :precondition (box-empty)\n    :effect (and (not (box-empty)) (packed ?item) (nothing-above ?item) (not (unpacked ?item)))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "Depot",
        "action": "Lift"
      },
      {
        "domain": "logistics",
        "action": "UNLOAD-TRUCK"
      },
      {
        "domain": "track-building",
        "action": "build-track"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Lift\" will have a hoist lift a crate from a surface at a place if the crate is on the surface, clear, and at the location and the hoist is available.\n\nPDDL Action:\n(:action Lift\n    :parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n    :precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n    :effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) (clear ?z) (not (on ?y ?z)))\n)Allowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"UNLOAD-TRUCK\" will unload a package from a truck at a given place if the package is in the truck.\n\nPDDL Action:\n(:action UNLOAD-TRUCK\n    :parameters (?pkg - package ?truck - truck ?loc - place)\n    :precondition (and (at ?truck ?loc) (in ?pkg ?truck))\n    :effect (and (not (in ?pkg ?truck)) (at ?pkg ?loc))\n)Allowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"build-track\" will build track at a location .\n\nPDDL Action:\n(:action build-track\n    :parameters (?loc - location)\n    :precondition (agent-at ?loc)\n    :effect (and (has-track ?loc))\n)\n\nAllowed Predicates:\n(heavier ?item1 - item ?item2 - item) : item1 is heavier than item2.\n(packed ?i - item) : item i is packed into the box.\n(unpacked ?i - item) : item i is unpacked from the box.\n(nothing-above ?i - item) : nothing is above item i in the box.\n(box-empty) : the box is empty.\n\nInput:\nThe action, \"pack-first\" will pack an item into the box if the box is empty.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "heavy-pack",
    "action": "pack-first",
    "pddl": "(:action pack-first\n    :parameters (?item - item)\n    :precondition (box-empty)\n    :effect (and (not (box-empty)) (packed ?item) (nothing-above ?item) (not (unpacked ?item)))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "hiking",
        "action": "walk"
      },
      {
        "domain": "gripper-typed",
        "action": "move"
      },
      {
        "domain": "Rover",
        "action": "navigate"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?loc - location) : the hikers are at the location loc.\n(isWater ?loc - location) : the location loc is water.\n(isHill ?loc - location) : the location loc is a hill.\n(adjacent ?loc1 - location ?loc2 - location) : location loc1 is adjacent to location loc2.\n(onTrail ?from - location ?to - location) : the hikers are on the trail from location from to location to.\n\nInput:\nThe action, \"walk\" will have the hikers at a location walk to another location..\n\nPDDL Action:\n(:action walk\n    :parameters (?from - location ?to - location)\n    :precondition (and (not (isHill ?to)) (at ?from) (adjacent ?from ?to) (not (isWater ?from)))\n    :effect (and (at ?to) (not (at ?from)))\n)Allowed Predicates:\n(at-robby ?r - room) : the robot robby is at the room r.\n(at ?b - ball ?r - room) : the ball b is at the room r.\n(free ?g - gripper) : the gripper g is free.\n(carry ?o - ball ?g - gripper) : gripper g is carrying ball g.\n\nInput:\nThe action, \"move\" will move the robot roby from a room to a new room.\n\nPDDL Action:\n(:action move\n    :parameters (?from - room ?to - room)\n    :precondition (at-robby ?from)\n    :effect (and (at-robby ?to) (not (at-robby ?from)))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"navigate\" will have a rover navigate from a waypoint y to a waypoint z.\n\nPDDL Action:\n(:action navigate\n    :parameters (?x - rover ?y - waypoint ?z - waypoint)\n    :precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) (visible ?y ?z))\n    :effect (and (not (at ?x ?y)) (at ?x ?z))\n)\n\nAllowed Predicates:\n(heavier ?item1 - item ?item2 - item) : item1 is heavier than item2.\n(packed ?i - item) : item i is packed into the box.\n(unpacked ?i - item) : item i is unpacked from the box.\n(nothing-above ?i - item) : nothing is above item i in the box.\n(box-empty) : the box is empty.\n\nInput:\nThe action, \"pack-first\" will pack an item into the box.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "heavy-pack",
    "action": "stack",
    "pddl": "(:action stack\n    :parameters (?bottom - item ?top - item)\n    :precondition (and (packed ?bottom) (nothing-above ?bottom) (heavier ?bottom ?top) (unpacked ?top))\n    :effect (and (packed ?top) (nothing-above ?top) (not (nothing-above ?bottom)) (not (unpacked ?top)))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "logistics",
        "action": "LOAD-AIRPLANE"
      },
      {
        "domain": "Rover",
        "action": "calibrate"
      },
      {
        "domain": "Depot",
        "action": "Load"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"LOAD-AIRPLANE\" will load an airplane with a package at a given place if the package is at the location.\n\nPDDL Action:\n(:action LOAD-AIRPLANE\n    :parameters (?pkg - package ?airplane - airplane ?loc - place)\n    :precondition (and (at ?pkg ?loc) (at ?airplane ?loc))\n    :effect (and (not (at ?pkg ?loc)) (in ?pkg ?airplane))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"calibrate\" will have a rover calibrate a camera for an objective at a waypoint .\n\nPDDL Action:\n(:action calibrate\n    :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n    :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w) (on_board ?i ?r))\n    :effect (calibrated ?i ?r)\n)Allowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Load\" will use a hoist to load a crate into a truck at a place if the hoist is lifting the crate.\n\nPDDL Action:\n(:action Load\n    :parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))\n    :effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x))\n)\n\nAllowed Predicates:\n(heavier ?item1 - item ?item2 - item) : item1 is heavier than item2.\n(packed ?i - item) : item i is packed into the box.\n(unpacked ?i - item) : item i is unpacked from the box.\n(nothing-above ?i - item) : nothing is above item i in the box.\n(box-empty) : the box is empty.\n\nInput:\nThe action, \"stack\" will stack an item ontop of another item in the box if nothing is above the item in the box and the item being placed ontop is unpacked.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "heavy-pack",
    "action": "stack",
    "pddl": "(:action stack\n    :parameters (?bottom - item ?top - item)\n    :precondition (and (packed ?bottom) (nothing-above ?bottom) (heavier ?bottom ?top) (unpacked ?top))\n    :effect (and (packed ?top) (nothing-above ?top) (not (nothing-above ?bottom)) (not (unpacked ?top)))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "logistics",
        "action": "UNLOAD-TRUCK"
      },
      {
        "domain": "track-building",
        "action": "move-agent"
      },
      {
        "domain": "Rover",
        "action": "communicate_image_data"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"UNLOAD-TRUCK\" will unload a package from a truck at a given place.\n\nPDDL Action:\n(:action UNLOAD-TRUCK\n    :parameters (?pkg - package ?truck - truck ?loc - place)\n    :precondition (and (at ?truck ?loc) (in ?pkg ?truck))\n    :effect (and (not (in ?pkg ?truck)) (at ?pkg ?loc))\n)Allowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"move-agent\" will move an agent from a location current-loc to a location next-loc.\n\nPDDL Action:\n(:action move-agent\n    :parameters (?current-loc - location ?next-loc - location)\n    :precondition (agent-at ?current-loc)\n    :effect (and (agent-at ?next-loc) (not (agent-at ?current-loc)))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_image_data\" will have a rover at a waypoint x comunicate image data taken in a mode about an objective via a lander at a waypoint y.\n\nPDDL Action:\n(:action communicate_image_data\n    :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_image ?r ?o ?m) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_image_data ?o ?m) (available ?r))\n)\n\nAllowed Predicates:\n(heavier ?item1 - item ?item2 - item) : item1 is heavier than item2.\n(packed ?i - item) : item i is packed into the box.\n(unpacked ?i - item) : item i is unpacked from the box.\n(nothing-above ?i - item) : nothing is above item i in the box.\n(box-empty) : the box is empty.\n\nInput:\nThe action, \"stack\" will stack an item ontop of another item in the box.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "logistics",
    "action": "DRIVE-TRUCK",
    "pddl": "(:action DRIVE-TRUCK\n    :parameters (?truck - truck ?loc-from - place ?loc-to - place ?city - city)\n    :precondition (and (at ?truck ?loc-from) (in-city ?loc-from ?city) (in-city ?loc-to ?city))\n    :effect (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "Rover",
        "action": "communicate_soil_data"
      },
      {
        "domain": "Rover",
        "action": "sample_rock"
      },
      {
        "domain": "Rover",
        "action": "communicate_rock_data"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_soil_data\" will have a rover at a waypoint x comunicate soil data about a waypoint p via a lander at another waypoint y if the rover is available and the lander has a free channel.\n\nPDDL Action:\n(:action communicate_soil_data\n    :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_soil_analysis ?r ?p) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_soil_data ?p) (available ?r))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"sample_rock\" will have a rover sample a rock into a store at a waypoint if the waypoint is at a rock sample and the store is empty.\n\nPDDL Action:\n(:action sample_rock\n    :parameters (?x - rover ?s - store ?p - waypoint)\n    :precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x) (empty ?s))\n    :effect (and (not (empty ?s)) (full ?s) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p)))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_rock_data\" will have a rover at a waypoint x comunicate rock data about a waypoint p via a lander at another waypoint y if the rover is available and the lander has a free channel.\n\nPDDL Action:\n(:action communicate_rock_data\n    :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_rock_analysis ?r ?p) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_rock_data ?p) (available ?r))\n)\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"DRIVE-TRUCK\" will drive a truck from a location to another in a given city if the truck is at the first place.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "logistics",
    "action": "DRIVE-TRUCK",
    "pddl": "(:action DRIVE-TRUCK\n    :parameters (?truck - truck ?loc-from - place ?loc-to - place ?city - city)\n    :precondition (and (at ?truck ?loc-from) (in-city ?loc-from ?city) (in-city ?loc-to ?city))\n    :effect (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "Rover",
        "action": "drop"
      },
      {
        "domain": "miconic",
        "action": "down"
      },
      {
        "domain": "Depot",
        "action": "Drop"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"drop\" will empty any items in a store from a rover.\n\nPDDL Action:\n(:action drop\n    :parameters (?x - rover ?y - store)\n    :precondition (and (store_of ?y ?x) (full ?y))\n    :effect (and (not (full ?y)) (empty ?y))\n)Allowed Predicates:\n(origin ?p - passenger ?f - floor) : passenger p starts on floor f.\n(destin ?p - passenger ?f - floor) : passenger p has floor f as their destination. \n(above ?f1 - floor  ?f2 - floor) : floor f1 is above floor f2.\n(boarded ?p - passenger) : passenger p has boarded the lift.\n(served ?p - passenger) : passenger p has been served by the lift.\n(lift-at ?f - floor) : the lift is at floor f.\n\nInput:\nThe action, \"down\" will move the lift down from a floor f1 to a floor f2.\n\nPDDL Action:\n(:action down\n    :parameters (?f1 - floor ?f2 - floor)\n    :precondition (and (lift-at ?f1) (above ?f2 ?f1))\n    :effect (and (lift-at ?f2) (not (lift-at ?f1)))\n)Allowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Drop\" will have a hoist drop a crate onto a surface at a place.\n\nPDDL Action:\n(:action Drop\n    :parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n    :effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y) (on ?y ?z))\n)\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"DRIVE-TRUCK\" will drive a truck from a location to another in a given city.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "logistics",
    "action": "LOAD-TRUCK",
    "pddl": "(:action LOAD-TRUCK\n    :parameters (?pkg - package ?truck - truck ?loc - place)\n    :precondition (and (at ?truck ?loc) (at ?pkg ?loc))\n    :effect (and (not (at ?pkg ?loc)) (in ?pkg ?truck))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "heavy-pack",
        "action": "pack-first"
      },
      {
        "domain": "Depot",
        "action": "Drive"
      },
      {
        "domain": "Rover",
        "action": "communicate_rock_data"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(heavier ?item1 - item ?item2 - item) : item1 is heavier than item2.\n(packed ?i - item) : item i is packed into the box.\n(unpacked ?i - item) : item i is unpacked from the box.\n(nothing-above ?i - item) : nothing is above item i in the box.\n(box-empty) : the box is empty.\n\nInput:\nThe action, \"pack-first\" will pack an item into the box if the box is empty.\n\nPDDL Action:\n(:action pack-first\n    :parameters (?item - item)\n    :precondition (box-empty)\n    :effect (and (not (box-empty)) (packed ?item) (nothing-above ?item) (not (unpacked ?item)))\n)Allowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Drive\" will drive a truck at a place y to a place z if the truck is at the location.\n\nPDDL Action:\n(:action Drive\n    :parameters (?x - truck ?y - place ?z - place)\n    :precondition (at ?x ?y)\n    :effect (and (not (at ?x ?y)) (at ?x ?z))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_rock_data\" will have a rover at a waypoint x comunicate rock data about a waypoint p via a lander at another waypoint y if the rover is available and the lander has a free channel.\n\nPDDL Action:\n(:action communicate_rock_data\n    :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_rock_analysis ?r ?p) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_rock_data ?p) (available ?r))\n)\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"LOAD-TRUCK\" will place a package in a truck at a given place if the package is at the place.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "logistics",
    "action": "LOAD-TRUCK",
    "pddl": "(:action LOAD-TRUCK\n    :parameters (?pkg - package ?truck - truck ?loc - place)\n    :precondition (and (at ?truck ?loc) (at ?pkg ?loc))\n    :effect (and (not (at ?pkg ?loc)) (in ?pkg ?truck))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "Rover",
        "action": "take_image"
      },
      {
        "domain": "Depot",
        "action": "Drive"
      },
      {
        "domain": "Rover",
        "action": "navigate"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"take_image\" will have a rover at a waypoint take an image of an objective in a mode.\n\nPDDL Action:\n(:action take_image\n    :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n    :precondition (and (calibrated ?i ?r) (on_board ?i ?r) (equipped_for_imaging ?r) (supports ?i ?m) (visible_from ?o ?p) (at ?r ?p))\n    :effect (and (have_image ?r ?o ?m) (not (calibrated ?i ?r)))\n)Allowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Drive\" will drive a truck at a place y to a place z.\n\nPDDL Action:\n(:action Drive\n    :parameters (?x - truck ?y - place ?z - place)\n    :precondition (at ?x ?y)\n    :effect (and (not (at ?x ?y)) (at ?x ?z))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"navigate\" will have a rover navigate from a waypoint y to a waypoint z.\n\nPDDL Action:\n(:action navigate\n    :parameters (?x - rover ?y - waypoint ?z - waypoint)\n    :precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) (visible ?y ?z))\n    :effect (and (not (at ?x ?y)) (at ?x ?z))\n)\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"LOAD-TRUCK\" will place a package in a truck at a given place.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "logistics",
    "action": "UNLOAD-TRUCK",
    "pddl": "(:action UNLOAD-TRUCK\n    :parameters (?pkg - package ?truck - truck ?loc - place)\n    :precondition (and (at ?truck ?loc) (in ?pkg ?truck))\n    :effect (and (not (in ?pkg ?truck)) (at ?pkg ?loc))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "BLOCKS",
        "action": "unstack"
      },
      {
        "domain": "heavy-pack",
        "action": "pack-first"
      },
      {
        "domain": "Depot",
        "action": "Drive"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"unstack\" will unstack a block x from a block y if the block x is clear, ontop of y, and the hand is empty.\n\nPDDL Action:\n(:action unstack\n    :parameters (?x - block ?y - block)\n    :precondition (and (on ?x ?y) (clear ?x) (handempty))\n    :effect (and (holding ?x) (clear ?y) (not (clear ?x)) (not (handempty)) (not (on ?x ?y)))\n)Allowed Predicates:\n(heavier ?item1 - item ?item2 - item) : item1 is heavier than item2.\n(packed ?i - item) : item i is packed into the box.\n(unpacked ?i - item) : item i is unpacked from the box.\n(nothing-above ?i - item) : nothing is above item i in the box.\n(box-empty) : the box is empty.\n\nInput:\nThe action, \"pack-first\" will pack an item into the box if the box is empty.\n\nPDDL Action:\n(:action pack-first\n    :parameters (?item - item)\n    :precondition (box-empty)\n    :effect (and (not (box-empty)) (packed ?item) (nothing-above ?item) (not (unpacked ?item)))\n)Allowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Drive\" will drive a truck at a place y to a place z if the truck is at the location.\n\nPDDL Action:\n(:action Drive\n    :parameters (?x - truck ?y - place ?z - place)\n    :precondition (at ?x ?y)\n    :effect (and (not (at ?x ?y)) (at ?x ?z))\n)\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"UNLOAD-TRUCK\" will unload a package from a truck at a given place if the package is in the truck.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "logistics",
    "action": "UNLOAD-TRUCK",
    "pddl": "(:action UNLOAD-TRUCK\n    :parameters (?pkg - package ?truck - truck ?loc - place)\n    :precondition (and (at ?truck ?loc) (in ?pkg ?truck))\n    :effect (and (not (in ?pkg ?truck)) (at ?pkg ?loc))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "Rover",
        "action": "sample_soil"
      },
      {
        "domain": "BLOCKS",
        "action": "put-down"
      },
      {
        "domain": "Depot",
        "action": "Unload"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"sample_soil\" will have a rover sample soil into a store at a waypoint.\n\nPDDL Action:\n(:action sample_soil\n    :parameters (?x - rover ?s - store ?p - waypoint)\n    :precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s))\n    :effect (and (not (empty ?s)) (full ?s) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p)))\n)Allowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"put-down\" will have the hand put down a block.\n\nPDDL Action:\n(:action put-down\n    :parameters (?x - block)\n    :precondition (holding ?x)\n    :effect (and (not (holding ?x)) (clear ?x) (handempty) (ontable ?x))\n)Allowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Unload\" will use a hoist to unload a crate from a truck at a place.\n\nPDDL Action:\n(:action Unload\n    :parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n    :effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y))\n)\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"UNLOAD-TRUCK\" will unload a package from a truck at a given place.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "logistics",
    "action": "FLY-AIRPLANE",
    "pddl": "(:action FLY-AIRPLANE\n    :parameters (?airplane - airplane ?loc-from - airport ?loc-to - airport)\n    :precondition (at ?airplane ?loc-from)\n    :effect (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "track-building",
        "action": "move-agent"
      },
      {
        "domain": "Depot",
        "action": "Drop"
      },
      {
        "domain": "heavy-pack",
        "action": "pack-first"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"move-agent\" will move an agent from a location current-loc to a location next-loc if the agent is at the current location.\n\nPDDL Action:\n(:action move-agent\n    :parameters (?current-loc - location ?next-loc - location)\n    :precondition (agent-at ?current-loc)\n    :effect (and (agent-at ?next-loc) (not (agent-at ?current-loc)))\n)Allowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Drop\" will have a hoist drop a crate onto a surface at a place if the hoist is lifting the crate and the surface is clear.\n\nPDDL Action:\n(:action Drop\n    :parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n    :effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y) (on ?y ?z))\n)Allowed Predicates:\n(heavier ?item1 - item ?item2 - item) : item1 is heavier than item2.\n(packed ?i - item) : item i is packed into the box.\n(unpacked ?i - item) : item i is unpacked from the box.\n(nothing-above ?i - item) : nothing is above item i in the box.\n(box-empty) : the box is empty.\n\nInput:\nThe action, \"pack-first\" will pack an item into the box if the box is empty.\n\nPDDL Action:\n(:action pack-first\n    :parameters (?item - item)\n    :precondition (box-empty)\n    :effect (and (not (box-empty)) (packed ?item) (nothing-above ?item) (not (unpacked ?item)))\n)\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"FLY-AIRPLANE\" will fly an airplane from one airport to another if the airplane is at the first airport.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "logistics",
    "action": "FLY-AIRPLANE",
    "pddl": "(:action FLY-AIRPLANE\n    :parameters (?airplane - airplane ?loc-from - airport ?loc-to - airport)\n    :precondition (at ?airplane ?loc-from)\n    :effect (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "gripper-typed",
        "action": "pick"
      },
      {
        "domain": "miconic",
        "action": "up"
      },
      {
        "domain": "heavy-pack",
        "action": "pack-first"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at-robby ?r - room) : the robot robby is at the room r.\n(at ?b - ball ?r - room) : the ball b is at the room r.\n(free ?g - gripper) : the gripper g is free.\n(carry ?o - ball ?g - gripper) : gripper g is carrying ball g.\n\nInput:\nThe action, \"pick\" will have the robot pick up a ball in a room using a gripper.\n\nPDDL Action:\n(:action pick\n    :parameters (?obj - ball ?room - room ?gripper - gripper)\n    :precondition (and (at ?obj ?room) (at-robby ?room) (free ?gripper))\n    :effect (and (carry ?obj ?gripper) (not (at ?obj ?room)) (not (free ?gripper)))\n)Allowed Predicates:\n(origin ?p - passenger ?f - floor) : passenger p starts on floor f.\n(destin ?p - passenger ?f - floor) : passenger p has floor f as their destination. \n(above ?f1 - floor  ?f2 - floor) : floor f1 is above floor f2.\n(boarded ?p - passenger) : passenger p has boarded the lift.\n(served ?p - passenger) : passenger p has been served by the lift.\n(lift-at ?f - floor) : the lift is at floor f.\n\nInput:\nThe action, \"up\" will move the lift up from a floor f1 to a floor f2.\n\nPDDL Action:\n(:action up\n    :parameters (?f1 - floor ?f2 - floor)\n    :precondition (and (lift-at ?f1) (above ?f1 ?f2))\n    :effect (and (lift-at ?f2) (not (lift-at ?f1)))\n)Allowed Predicates:\n(heavier ?item1 - item ?item2 - item) : item1 is heavier than item2.\n(packed ?i - item) : item i is packed into the box.\n(unpacked ?i - item) : item i is unpacked from the box.\n(nothing-above ?i - item) : nothing is above item i in the box.\n(box-empty) : the box is empty.\n\nInput:\nThe action, \"pack-first\" will pack an item into the box.\n\nPDDL Action:\n(:action pack-first\n    :parameters (?item - item)\n    :precondition (box-empty)\n    :effect (and (not (box-empty)) (packed ?item) (nothing-above ?item) (not (unpacked ?item)))\n)\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"FLY-AIRPLANE\" will fly an airplane from one airport to another.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "logistics",
    "action": "UNLOAD-AIRPLANE",
    "pddl": "(:action UNLOAD-AIRPLANE\n    :parameters (?pkg - package ?airplane - airplane ?loc - place)\n    :precondition (and (in ?pkg ?airplane) (at ?airplane ?loc))\n    :effect (and (not (in ?pkg ?airplane)) (at ?pkg ?loc))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "heavy-pack",
        "action": "stack"
      },
      {
        "domain": "track-building",
        "action": "move-train"
      },
      {
        "domain": "track-building",
        "action": "build-track"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(heavier ?item1 - item ?item2 - item) : item1 is heavier than item2.\n(packed ?i - item) : item i is packed into the box.\n(unpacked ?i - item) : item i is unpacked from the box.\n(nothing-above ?i - item) : nothing is above item i in the box.\n(box-empty) : the box is empty.\n\nInput:\nThe action, \"stack\" will stack an item ontop of another item in the box if nothing is above the item in the box and the item being placed ontop is unpacked.\n\nPDDL Action:\n(:action stack\n    :parameters (?bottom - item ?top - item)\n    :precondition (and (packed ?bottom) (nothing-above ?bottom) (heavier ?bottom ?top) (unpacked ?top))\n    :effect (and (packed ?top) (nothing-above ?top) (not (nothing-above ?bottom)) (not (unpacked ?top)))\n)Allowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"move-train\" will move the train from a location current-loc to a location next-loc if the train is at the current location.\n\nPDDL Action:\n(:action move-train\n    :parameters (?current-loc - location ?next-loc - location)\n    :precondition (and (train-at ?current-loc) (has-track ?next-loc) (forward ?current-loc ?next-loc))\n    :effect (and (train-at ?next-loc) (not (train-at ?current-loc)))\n)Allowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"build-track\" will build track at a location .\n\nPDDL Action:\n(:action build-track\n    :parameters (?loc - location)\n    :precondition (agent-at ?loc)\n    :effect (and (has-track ?loc))\n)\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"UNLOAD-AIRPLANE\" will unload a package from an airplane at a given place if the package is in the airplane.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "logistics",
    "action": "UNLOAD-AIRPLANE",
    "pddl": "(:action UNLOAD-AIRPLANE\n    :parameters (?pkg - package ?airplane - airplane ?loc - place)\n    :precondition (and (in ?pkg ?airplane) (at ?airplane ?loc))\n    :effect (and (not (in ?pkg ?airplane)) (at ?pkg ?loc))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "Rover",
        "action": "drop"
      },
      {
        "domain": "hiking",
        "action": "walk"
      },
      {
        "domain": "Depot",
        "action": "Lift"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"drop\" will empty any items in a store from a rover.\n\nPDDL Action:\n(:action drop\n    :parameters (?x - rover ?y - store)\n    :precondition (and (store_of ?y ?x) (full ?y))\n    :effect (and (not (full ?y)) (empty ?y))\n)Allowed Predicates:\n(at ?loc - location) : the hikers are at the location loc.\n(isWater ?loc - location) : the location loc is water.\n(isHill ?loc - location) : the location loc is a hill.\n(adjacent ?loc1 - location ?loc2 - location) : location loc1 is adjacent to location loc2.\n(onTrail ?from - location ?to - location) : the hikers are on the trail from location from to location to.\n\nInput:\nThe action, \"walk\" will have the hikers at a location walk to another location..\n\nPDDL Action:\n(:action walk\n    :parameters (?from - location ?to - location)\n    :precondition (and (not (isHill ?to)) (at ?from) (adjacent ?from ?to) (not (isWater ?from)))\n    :effect (and (at ?to) (not (at ?from)))\n)Allowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Lift\" will have a hoist lift a crate from a surface at a place.\n\nPDDL Action:\n(:action Lift\n    :parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n    :precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n    :effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) (clear ?z) (not (on ?y ?z)))\n)\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"UNLOAD-AIRPLANE\" will unload a package from an airplane at a given place.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "logistics",
    "action": "LOAD-AIRPLANE",
    "pddl": "(:action LOAD-AIRPLANE\n    :parameters (?pkg - package ?airplane - airplane ?loc - place)\n    :precondition (and (at ?pkg ?loc) (at ?airplane ?loc))\n    :effect (and (not (at ?pkg ?loc)) (in ?pkg ?airplane))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "Rover",
        "action": "sample_soil"
      },
      {
        "domain": "track-building",
        "action": "build-track"
      },
      {
        "domain": "trapnewspapers",
        "action": "pick-up"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"sample_soil\" will have a rover sample soil into a store at a waypoint if the waypoint is at a soil sample and the store is empty.\n\nPDDL Action:\n(:action sample_soil\n    :parameters (?x - rover ?s - store ?p - waypoint)\n    :precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s))\n    :effect (and (not (empty ?s)) (full ?s) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p)))\n)Allowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"build-track\" will build track at a location .\n\nPDDL Action:\n(:action build-track\n    :parameters (?loc - location)\n    :precondition (agent-at ?loc)\n    :effect (and (has-track ?loc))\n)Allowed Predicates:\n(at ?loc - location) : the deliverer is at location loc. \n(isHomeBase ?loc - location) : the location loc is the home base of the deliverer.\n(satisfied ?loc - location) : the location loc is satisfied.\n(wantsPaper ?loc - location) : the location loc wants a paper.\n(safe ?loc - location) : the location loc is safe.\n(unpacked ?p - paper) : the paper p is unpacked.\n(carrying ?p - paper) : the paper p is being carried.\n\nInput:\nThe action, \"pick-up\" will have the deliverer pick up a paper at a location if the paper is unpacked.\n\nPDDL Action:\n(:action pick-up\n    :parameters (?paper - paper ?loc - location)\n    :precondition (and (at ?loc) (isHomeBase ?loc) (unpacked ?paper))\n    :effect (and (not (unpacked ?paper)) (carrying ?paper))\n)\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"LOAD-AIRPLANE\" will load an airplane with a package at a given place if the package is at the location.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "logistics",
    "action": "LOAD-AIRPLANE",
    "pddl": "(:action LOAD-AIRPLANE\n    :parameters (?pkg - package ?airplane - airplane ?loc - place)\n    :precondition (and (at ?pkg ?loc) (at ?airplane ?loc))\n    :effect (and (not (at ?pkg ?loc)) (in ?pkg ?airplane))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "Rover",
        "action": "take_image"
      },
      {
        "domain": "Rover",
        "action": "navigate"
      },
      {
        "domain": "miconic",
        "action": "up"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"take_image\" will have a rover at a waypoint take an image of an objective in a mode.\n\nPDDL Action:\n(:action take_image\n    :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n    :precondition (and (calibrated ?i ?r) (on_board ?i ?r) (equipped_for_imaging ?r) (supports ?i ?m) (visible_from ?o ?p) (at ?r ?p))\n    :effect (and (have_image ?r ?o ?m) (not (calibrated ?i ?r)))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"navigate\" will have a rover navigate from a waypoint y to a waypoint z.\n\nPDDL Action:\n(:action navigate\n    :parameters (?x - rover ?y - waypoint ?z - waypoint)\n    :precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) (visible ?y ?z))\n    :effect (and (not (at ?x ?y)) (at ?x ?z))\n)Allowed Predicates:\n(origin ?p - passenger ?f - floor) : passenger p starts on floor f.\n(destin ?p - passenger ?f - floor) : passenger p has floor f as their destination. \n(above ?f1 - floor  ?f2 - floor) : floor f1 is above floor f2.\n(boarded ?p - passenger) : passenger p has boarded the lift.\n(served ?p - passenger) : passenger p has been served by the lift.\n(lift-at ?f - floor) : the lift is at floor f.\n\nInput:\nThe action, \"up\" will move the lift up from a floor f1 to a floor f2.\n\nPDDL Action:\n(:action up\n    :parameters (?f1 - floor ?f2 - floor)\n    :precondition (and (lift-at ?f1) (above ?f1 ?f2))\n    :effect (and (lift-at ?f2) (not (lift-at ?f1)))\n)\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"LOAD-AIRPLANE\" will load an airplane with a package at a given place.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Rover",
    "action": "sample_soil",
    "pddl": "(:action sample_soil\n    :parameters (?x - rover ?s - store ?p - waypoint)\n    :precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s))\n    :effect (and (not (empty ?s)) (full ?s) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p)))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "logistics",
        "action": "LOAD-TRUCK"
      },
      {
        "domain": "logistics",
        "action": "UNLOAD-AIRPLANE"
      },
      {
        "domain": "hiking",
        "action": "walk"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"LOAD-TRUCK\" will place a package in a truck at a given place if the package is at the place.\n\nPDDL Action:\n(:action LOAD-TRUCK\n    :parameters (?pkg - package ?truck - truck ?loc - place)\n    :precondition (and (at ?truck ?loc) (at ?pkg ?loc))\n    :effect (and (not (at ?pkg ?loc)) (in ?pkg ?truck))\n)Allowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"UNLOAD-AIRPLANE\" will unload a package from an airplane at a given place if the package is in the airplane.\n\nPDDL Action:\n(:action UNLOAD-AIRPLANE\n    :parameters (?pkg - package ?airplane - airplane ?loc - place)\n    :precondition (and (in ?pkg ?airplane) (at ?airplane ?loc))\n    :effect (and (not (in ?pkg ?airplane)) (at ?pkg ?loc))\n)Allowed Predicates:\n(at ?loc - location) : the hikers are at the location loc.\n(isWater ?loc - location) : the location loc is water.\n(isHill ?loc - location) : the location loc is a hill.\n(adjacent ?loc1 - location ?loc2 - location) : location loc1 is adjacent to location loc2.\n(onTrail ?from - location ?to - location) : the hikers are on the trail from location from to location to.\n\nInput:\nThe action, \"walk\" will have the hikers at a location walk to another location. if the hikers are at the first location.\n\nPDDL Action:\n(:action walk\n    :parameters (?from - location ?to - location)\n    :precondition (and (not (isHill ?to)) (at ?from) (adjacent ?from ?to) (not (isWater ?from)))\n    :effect (and (at ?to) (not (at ?from)))\n)\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"sample_soil\" will have a rover sample soil into a store at a waypoint if the waypoint is at a soil sample and the store is empty.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Rover",
    "action": "sample_soil",
    "pddl": "(:action sample_soil\n    :parameters (?x - rover ?s - store ?p - waypoint)\n    :precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s))\n    :effect (and (not (empty ?s)) (full ?s) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p)))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "Depot",
        "action": "Unload"
      },
      {
        "domain": "miconic",
        "action": "down"
      },
      {
        "domain": "miconic",
        "action": "depart"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Unload\" will use a hoist to unload a crate from a truck at a place.\n\nPDDL Action:\n(:action Unload\n    :parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n    :effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y))\n)Allowed Predicates:\n(origin ?p - passenger ?f - floor) : passenger p starts on floor f.\n(destin ?p - passenger ?f - floor) : passenger p has floor f as their destination. \n(above ?f1 - floor  ?f2 - floor) : floor f1 is above floor f2.\n(boarded ?p - passenger) : passenger p has boarded the lift.\n(served ?p - passenger) : passenger p has been served by the lift.\n(lift-at ?f - floor) : the lift is at floor f.\n\nInput:\nThe action, \"down\" will move the lift down from a floor f1 to a floor f2.\n\nPDDL Action:\n(:action down\n    :parameters (?f1 - floor ?f2 - floor)\n    :precondition (and (lift-at ?f1) (above ?f2 ?f1))\n    :effect (and (lift-at ?f2) (not (lift-at ?f1)))\n)Allowed Predicates:\n(origin ?p - passenger ?f - floor) : passenger p starts on floor f.\n(destin ?p - passenger ?f - floor) : passenger p has floor f as their destination. \n(above ?f1 - floor  ?f2 - floor) : floor f1 is above floor f2.\n(boarded ?p - passenger) : passenger p has boarded the lift.\n(served ?p - passenger) : passenger p has been served by the lift.\n(lift-at ?f - floor) : the lift is at floor f.\n\nInput:\nThe action, \"depart\" will have a passenger depart the lift at a floor.\n\nPDDL Action:\n(:action depart\n    :parameters (?f - floor ?p - passenger)\n    :precondition (and (lift-at ?f) (destin ?p ?f) (boarded ?p))\n    :effect (and (not (boarded ?p)) (served ?p))\n)\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"sample_soil\" will have a rover sample soil into a store at a waypoint.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Rover",
    "action": "communicate_rock_data",
    "pddl": "(:action communicate_rock_data\n    :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_rock_analysis ?r ?p) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_rock_data ?p) (available ?r))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "logistics",
        "action": "FLY-AIRPLANE"
      },
      {
        "domain": "Depot",
        "action": "Drive"
      },
      {
        "domain": "trapnewspapers",
        "action": "pick-up"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"FLY-AIRPLANE\" will fly an airplane from one airport to another if the airplane is at the first airport.\n\nPDDL Action:\n(:action FLY-AIRPLANE\n    :parameters (?airplane - airplane ?loc-from - airport ?loc-to - airport)\n    :precondition (at ?airplane ?loc-from)\n    :effect (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to))\n)Allowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Drive\" will drive a truck at a place y to a place z if the truck is at the location.\n\nPDDL Action:\n(:action Drive\n    :parameters (?x - truck ?y - place ?z - place)\n    :precondition (at ?x ?y)\n    :effect (and (not (at ?x ?y)) (at ?x ?z))\n)Allowed Predicates:\n(at ?loc - location) : the deliverer is at location loc. \n(isHomeBase ?loc - location) : the location loc is the home base of the deliverer.\n(satisfied ?loc - location) : the location loc is satisfied.\n(wantsPaper ?loc - location) : the location loc wants a paper.\n(safe ?loc - location) : the location loc is safe.\n(unpacked ?p - paper) : the paper p is unpacked.\n(carrying ?p - paper) : the paper p is being carried.\n\nInput:\nThe action, \"pick-up\" will have the deliverer pick up a paper at a location if the paper is unpacked.\n\nPDDL Action:\n(:action pick-up\n    :parameters (?paper - paper ?loc - location)\n    :precondition (and (at ?loc) (isHomeBase ?loc) (unpacked ?paper))\n    :effect (and (not (unpacked ?paper)) (carrying ?paper))\n)\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_rock_data\" will have a rover at a waypoint x comunicate rock data about a waypoint p via a lander at another waypoint y if the rover is available and the lander has a free channel.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Rover",
    "action": "communicate_rock_data",
    "pddl": "(:action communicate_rock_data\n    :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_rock_analysis ?r ?p) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_rock_data ?p) (available ?r))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "gripper-typed",
        "action": "move"
      },
      {
        "domain": "track-building",
        "action": "move-agent"
      },
      {
        "domain": "track-building",
        "action": "move-train"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at-robby ?r - room) : the robot robby is at the room r.\n(at ?b - ball ?r - room) : the ball b is at the room r.\n(free ?g - gripper) : the gripper g is free.\n(carry ?o - ball ?g - gripper) : gripper g is carrying ball g.\n\nInput:\nThe action, \"move\" will move the robot roby from a room to a new room.\n\nPDDL Action:\n(:action move\n    :parameters (?from - room ?to - room)\n    :precondition (at-robby ?from)\n    :effect (and (at-robby ?to) (not (at-robby ?from)))\n)Allowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"move-agent\" will move an agent from a location current-loc to a location next-loc.\n\nPDDL Action:\n(:action move-agent\n    :parameters (?current-loc - location ?next-loc - location)\n    :precondition (agent-at ?current-loc)\n    :effect (and (agent-at ?next-loc) (not (agent-at ?current-loc)))\n)Allowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"move-train\" will move the train from a location current-loc to a location next-loc.\n\nPDDL Action:\n(:action move-train\n    :parameters (?current-loc - location ?next-loc - location)\n    :precondition (and (train-at ?current-loc) (has-track ?next-loc) (forward ?current-loc ?next-loc))\n    :effect (and (train-at ?next-loc) (not (train-at ?current-loc)))\n)\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_rock_data\" will have a rover at a waypoint x comunicate rock data about a waypoint p via a lander at another waypoint y.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Rover",
    "action": "drop",
    "pddl": "(:action drop\n    :parameters (?x - rover ?y - store)\n    :precondition (and (store_of ?y ?x) (full ?y))\n    :effect (and (not (full ?y)) (empty ?y))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "miconic",
        "action": "depart"
      },
      {
        "domain": "gripper-typed",
        "action": "drop"
      },
      {
        "domain": "BLOCKS",
        "action": "unstack"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(origin ?p - passenger ?f - floor) : passenger p starts on floor f.\n(destin ?p - passenger ?f - floor) : passenger p has floor f as their destination. \n(above ?f1 - floor  ?f2 - floor) : floor f1 is above floor f2.\n(boarded ?p - passenger) : passenger p has boarded the lift.\n(served ?p - passenger) : passenger p has been served by the lift.\n(lift-at ?f - floor) : the lift is at floor f.\n\nInput:\nThe action, \"depart\" will have a passenger depart the lift at a floor if the passanger has boarded the lift.\n\nPDDL Action:\n(:action depart\n    :parameters (?f - floor ?p - passenger)\n    :precondition (and (lift-at ?f) (destin ?p ?f) (boarded ?p))\n    :effect (and (not (boarded ?p)) (served ?p))\n)Allowed Predicates:\n(at-robby ?r - room) : the robot robby is at the room r.\n(at ?b - ball ?r - room) : the ball b is at the room r.\n(free ?g - gripper) : the gripper g is free.\n(carry ?o - ball ?g - gripper) : gripper g is carrying ball g.\n\nInput:\nThe action, \"drop\" will drop a ball in a room using a gripper if the ball is being caried by the gripper.\n\nPDDL Action:\n(:action drop\n    :parameters (?obj - ball ?room - room ?gripper - gripper)\n    :precondition (and (carry ?obj ?gripper) (at-robby ?room))\n    :effect (and (at ?obj ?room) (free ?gripper) (not (carry ?obj ?gripper)))\n)Allowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"unstack\" will unstack a block x from a block y if the block x is clear, ontop of y, and the hand is empty.\n\nPDDL Action:\n(:action unstack\n    :parameters (?x - block ?y - block)\n    :precondition (and (on ?x ?y) (clear ?x) (handempty))\n    :effect (and (holding ?x) (clear ?y) (not (clear ?x)) (not (handempty)) (not (on ?x ?y)))\n)\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"drop\" will empty any items in a store from a rover if the store is full.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Rover",
    "action": "drop",
    "pddl": "(:action drop\n    :parameters (?x - rover ?y - store)\n    :precondition (and (store_of ?y ?x) (full ?y))\n    :effect (and (not (full ?y)) (empty ?y))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "logistics",
        "action": "DRIVE-TRUCK"
      },
      {
        "domain": "logistics",
        "action": "FLY-AIRPLANE"
      },
      {
        "domain": "hiking",
        "action": "walk"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"DRIVE-TRUCK\" will drive a truck from a location to another in a given city.\n\nPDDL Action:\n(:action DRIVE-TRUCK\n    :parameters (?truck - truck ?loc-from - place ?loc-to - place ?city - city)\n    :precondition (and (at ?truck ?loc-from) (in-city ?loc-from ?city) (in-city ?loc-to ?city))\n    :effect (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to))\n)Allowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"FLY-AIRPLANE\" will fly an airplane from one airport to another.\n\nPDDL Action:\n(:action FLY-AIRPLANE\n    :parameters (?airplane - airplane ?loc-from - airport ?loc-to - airport)\n    :precondition (at ?airplane ?loc-from)\n    :effect (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to))\n)Allowed Predicates:\n(at ?loc - location) : the hikers are at the location loc.\n(isWater ?loc - location) : the location loc is water.\n(isHill ?loc - location) : the location loc is a hill.\n(adjacent ?loc1 - location ?loc2 - location) : location loc1 is adjacent to location loc2.\n(onTrail ?from - location ?to - location) : the hikers are on the trail from location from to location to.\n\nInput:\nThe action, \"walk\" will have the hikers at a location walk to another location..\n\nPDDL Action:\n(:action walk\n    :parameters (?from - location ?to - location)\n    :precondition (and (not (isHill ?to)) (at ?from) (adjacent ?from ?to) (not (isWater ?from)))\n    :effect (and (at ?to) (not (at ?from)))\n)\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"drop\" will empty any items in a store from a rover.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Rover",
    "action": "sample_rock",
    "pddl": "(:action sample_rock\n    :parameters (?x - rover ?s - store ?p - waypoint)\n    :precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x) (empty ?s))\n    :effect (and (not (empty ?s)) (full ?s) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p)))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "hiking",
        "action": "walk"
      },
      {
        "domain": "heavy-pack",
        "action": "stack"
      },
      {
        "domain": "trapnewspapers",
        "action": "move"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?loc - location) : the hikers are at the location loc.\n(isWater ?loc - location) : the location loc is water.\n(isHill ?loc - location) : the location loc is a hill.\n(adjacent ?loc1 - location ?loc2 - location) : location loc1 is adjacent to location loc2.\n(onTrail ?from - location ?to - location) : the hikers are on the trail from location from to location to.\n\nInput:\nThe action, \"walk\" will have the hikers at a location walk to another location. if the hikers are at the first location.\n\nPDDL Action:\n(:action walk\n    :parameters (?from - location ?to - location)\n    :precondition (and (not (isHill ?to)) (at ?from) (adjacent ?from ?to) (not (isWater ?from)))\n    :effect (and (at ?to) (not (at ?from)))\n)Allowed Predicates:\n(heavier ?item1 - item ?item2 - item) : item1 is heavier than item2.\n(packed ?i - item) : item i is packed into the box.\n(unpacked ?i - item) : item i is unpacked from the box.\n(nothing-above ?i - item) : nothing is above item i in the box.\n(box-empty) : the box is empty.\n\nInput:\nThe action, \"stack\" will stack an item ontop of another item in the box if nothing is above the item in the box and the item being placed ontop is unpacked.\n\nPDDL Action:\n(:action stack\n    :parameters (?bottom - item ?top - item)\n    :precondition (and (packed ?bottom) (nothing-above ?bottom) (heavier ?bottom ?top) (unpacked ?top))\n    :effect (and (packed ?top) (nothing-above ?top) (not (nothing-above ?bottom)) (not (unpacked ?top)))\n)Allowed Predicates:\n(at ?loc - location) : the deliverer is at location loc. \n(isHomeBase ?loc - location) : the location loc is the home base of the deliverer.\n(satisfied ?loc - location) : the location loc is satisfied.\n(wantsPaper ?loc - location) : the location loc wants a paper.\n(safe ?loc - location) : the location loc is safe.\n(unpacked ?p - paper) : the paper p is unpacked.\n(carrying ?p - paper) : the paper p is being carried.\n\nInput:\nThe action, \"move\" will move the deliverer from a location \"from\" to a location \"to\" if the deliverer is at the \"from\" location.\n\nPDDL Action:\n(:action move\n    :parameters (?from - location ?to - location)\n    :precondition (and (at ?from) (safe ?from))\n    :effect (and (not (at ?from)) (at ?to))\n)\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"sample_rock\" will have a rover sample a rock into a store at a waypoint if the waypoint is at a rock sample and the store is empty.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Rover",
    "action": "sample_rock",
    "pddl": "(:action sample_rock\n    :parameters (?x - rover ?s - store ?p - waypoint)\n    :precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x) (empty ?s))\n    :effect (and (not (empty ?s)) (full ?s) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p)))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "logistics",
        "action": "UNLOAD-AIRPLANE"
      },
      {
        "domain": "Depot",
        "action": "Unload"
      },
      {
        "domain": "track-building",
        "action": "build-track"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"UNLOAD-AIRPLANE\" will unload a package from an airplane at a given place.\n\nPDDL Action:\n(:action UNLOAD-AIRPLANE\n    :parameters (?pkg - package ?airplane - airplane ?loc - place)\n    :precondition (and (in ?pkg ?airplane) (at ?airplane ?loc))\n    :effect (and (not (in ?pkg ?airplane)) (at ?pkg ?loc))\n)Allowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Unload\" will use a hoist to unload a crate from a truck at a place.\n\nPDDL Action:\n(:action Unload\n    :parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n    :effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y))\n)Allowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"build-track\" will build track at a location.\n\nPDDL Action:\n(:action build-track\n    :parameters (?loc - location)\n    :precondition (agent-at ?loc)\n    :effect (and (has-track ?loc))\n)\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"sample_rock\" will have a rover sample a rock into a store at a waypoint.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Rover",
    "action": "communicate_image_data",
    "pddl": "(:action communicate_image_data\n    :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_image ?r ?o ?m) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_image_data ?o ?m) (available ?r))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "BLOCKS",
        "action": "unstack"
      },
      {
        "domain": "track-building",
        "action": "move-agent"
      },
      {
        "domain": "Depot",
        "action": "Load"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"unstack\" will unstack a block x from a block y if the block x is clear, ontop of y, and the hand is empty.\n\nPDDL Action:\n(:action unstack\n    :parameters (?x - block ?y - block)\n    :precondition (and (on ?x ?y) (clear ?x) (handempty))\n    :effect (and (holding ?x) (clear ?y) (not (clear ?x)) (not (handempty)) (not (on ?x ?y)))\n)Allowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"move-agent\" will move an agent from a location current-loc to a location next-loc if the agent is at the current location.\n\nPDDL Action:\n(:action move-agent\n    :parameters (?current-loc - location ?next-loc - location)\n    :precondition (agent-at ?current-loc)\n    :effect (and (agent-at ?next-loc) (not (agent-at ?current-loc)))\n)Allowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Load\" will use a hoist to load a crate into a truck at a place if the hoist is lifting the crate.\n\nPDDL Action:\n(:action Load\n    :parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))\n    :effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x))\n)\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_image_data\" will have a rover at a waypoint x comunicate image data taken in a mode about an objective via a lander at a waypoint y if the rover is available and the lander has a free channel.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Rover",
    "action": "communicate_image_data",
    "pddl": "(:action communicate_image_data\n    :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_image ?r ?o ?m) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_image_data ?o ?m) (available ?r))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "Depot",
        "action": "Load"
      },
      {
        "domain": "BLOCKS",
        "action": "unstack"
      },
      {
        "domain": "BLOCKS",
        "action": "stack"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Load\" will use a hoist to load a crate into a truck at a place.\n\nPDDL Action:\n(:action Load\n    :parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))\n    :effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x))\n)Allowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"unstack\" will unstack a block x from a block y.\n\nPDDL Action:\n(:action unstack\n    :parameters (?x - block ?y - block)\n    :precondition (and (on ?x ?y) (clear ?x) (handempty))\n    :effect (and (holding ?x) (clear ?y) (not (clear ?x)) (not (handempty)) (not (on ?x ?y)))\n)Allowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"stack\" will stack a block x onto block y.\n\nPDDL Action:\n(:action stack\n    :parameters (?x - block ?y - block)\n    :precondition (and (holding ?x) (clear ?y))\n    :effect (and (not (holding ?x)) (not (clear ?y)) (clear ?x) (handempty) (on ?x ?y))\n)\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_image_data\" will have a rover at a waypoint x comunicate image data taken in a mode about an objective via a lander at a waypoint y.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Rover",
    "action": "communicate_soil_data",
    "pddl": "(:action communicate_soil_data\n    :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_soil_analysis ?r ?p) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_soil_data ?p) (available ?r))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "Depot",
        "action": "Drive"
      },
      {
        "domain": "gripper-typed",
        "action": "move"
      },
      {
        "domain": "track-building",
        "action": "move-train"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Drive\" will drive a truck at a place y to a place z if the truck is at the location.\n\nPDDL Action:\n(:action Drive\n    :parameters (?x - truck ?y - place ?z - place)\n    :precondition (at ?x ?y)\n    :effect (and (not (at ?x ?y)) (at ?x ?z))\n)Allowed Predicates:\n(at-robby ?r - room) : the robot robby is at the room r.\n(at ?b - ball ?r - room) : the ball b is at the room r.\n(free ?g - gripper) : the gripper g is free.\n(carry ?o - ball ?g - gripper) : gripper g is carrying ball g.\n\nInput:\nThe action, \"move\" will move the robot roby from a room to a new room if the robot robby is in the initial room.\n\nPDDL Action:\n(:action move\n    :parameters (?from - room ?to - room)\n    :precondition (at-robby ?from)\n    :effect (and (at-robby ?to) (not (at-robby ?from)))\n)Allowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"move-train\" will move the train from a location current-loc to a location next-loc if the train is at the current location.\n\nPDDL Action:\n(:action move-train\n    :parameters (?current-loc - location ?next-loc - location)\n    :precondition (and (train-at ?current-loc) (has-track ?next-loc) (forward ?current-loc ?next-loc))\n    :effect (and (train-at ?next-loc) (not (train-at ?current-loc)))\n)\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_soil_data\" will have a rover at a waypoint x comunicate soil data about a waypoint p via a lander at another waypoint y if the rover is available and the lander has a free channel.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Rover",
    "action": "communicate_soil_data",
    "pddl": "(:action communicate_soil_data\n    :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_soil_analysis ?r ?p) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_soil_data ?p) (available ?r))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "Depot",
        "action": "Load"
      },
      {
        "domain": "BLOCKS",
        "action": "unstack"
      },
      {
        "domain": "logistics",
        "action": "DRIVE-TRUCK"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Load\" will use a hoist to load a crate into a truck at a place.\n\nPDDL Action:\n(:action Load\n    :parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))\n    :effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x))\n)Allowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"unstack\" will unstack a block x from a block y.\n\nPDDL Action:\n(:action unstack\n    :parameters (?x - block ?y - block)\n    :precondition (and (on ?x ?y) (clear ?x) (handempty))\n    :effect (and (holding ?x) (clear ?y) (not (clear ?x)) (not (handempty)) (not (on ?x ?y)))\n)Allowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"DRIVE-TRUCK\" will drive a truck from a location to another in a given city.\n\nPDDL Action:\n(:action DRIVE-TRUCK\n    :parameters (?truck - truck ?loc-from - place ?loc-to - place ?city - city)\n    :precondition (and (at ?truck ?loc-from) (in-city ?loc-from ?city) (in-city ?loc-to ?city))\n    :effect (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to))\n)\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_soil_data\" will have a rover at a waypoint x comunicate soil data about a waypoint p via a lander at another waypoint y.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Rover",
    "action": "navigate",
    "pddl": "(:action navigate\n    :parameters (?x - rover ?y - waypoint ?z - waypoint)\n    :precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) (visible ?y ?z))\n    :effect (and (not (at ?x ?y)) (at ?x ?z))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "BLOCKS",
        "action": "unstack"
      },
      {
        "domain": "miconic",
        "action": "up"
      },
      {
        "domain": "trapnewspapers",
        "action": "deliver"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"unstack\" will unstack a block x from a block y if the block x is clear, ontop of y, and the hand is empty.\n\nPDDL Action:\n(:action unstack\n    :parameters (?x - block ?y - block)\n    :precondition (and (on ?x ?y) (clear ?x) (handempty))\n    :effect (and (holding ?x) (clear ?y) (not (clear ?x)) (not (handempty)) (not (on ?x ?y)))\n)Allowed Predicates:\n(origin ?p - passenger ?f - floor) : passenger p starts on floor f.\n(destin ?p - passenger ?f - floor) : passenger p has floor f as their destination. \n(above ?f1 - floor  ?f2 - floor) : floor f1 is above floor f2.\n(boarded ?p - passenger) : passenger p has boarded the lift.\n(served ?p - passenger) : passenger p has been served by the lift.\n(lift-at ?f - floor) : the lift is at floor f.\n\nInput:\nThe action, \"up\" will move the lift up from a floor f1 to a floor f2 if the lift is at floor 1.\n\nPDDL Action:\n(:action up\n    :parameters (?f1 - floor ?f2 - floor)\n    :precondition (and (lift-at ?f1) (above ?f1 ?f2))\n    :effect (and (lift-at ?f2) (not (lift-at ?f1)))\n)Allowed Predicates:\n(at ?loc - location) : the deliverer is at location loc. \n(isHomeBase ?loc - location) : the location loc is the home base of the deliverer.\n(satisfied ?loc - location) : the location loc is satisfied.\n(wantsPaper ?loc - location) : the location loc wants a paper.\n(safe ?loc - location) : the location loc is safe.\n(unpacked ?p - paper) : the paper p is unpacked.\n(carrying ?p - paper) : the paper p is being carried.\n\nInput:\nThe action, \"deliver\" will have the deliverer drop off a paper in a location if the deliverer is carrying the paper.\n\nPDDL Action:\n(:action deliver\n    :parameters (?paper - paper ?loc - location)\n    :precondition (and (at ?loc) (carrying ?paper))\n    :effect (and (not (carrying ?paper)) (not (wantsPaper ?loc)) (satisfied ?loc))\n)\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"navigate\" will have a rover navigate from a waypoint y to a waypoint z if the rover is at waypoint y.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Rover",
    "action": "navigate",
    "pddl": "(:action navigate\n    :parameters (?x - rover ?y - waypoint ?z - waypoint)\n    :precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) (visible ?y ?z))\n    :effect (and (not (at ?x ?y)) (at ?x ?z))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "logistics",
        "action": "UNLOAD-AIRPLANE"
      },
      {
        "domain": "Depot",
        "action": "Unload"
      },
      {
        "domain": "trapnewspapers",
        "action": "move"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"UNLOAD-AIRPLANE\" will unload a package from an airplane at a given place.\n\nPDDL Action:\n(:action UNLOAD-AIRPLANE\n    :parameters (?pkg - package ?airplane - airplane ?loc - place)\n    :precondition (and (in ?pkg ?airplane) (at ?airplane ?loc))\n    :effect (and (not (in ?pkg ?airplane)) (at ?pkg ?loc))\n)Allowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Unload\" will use a hoist to unload a crate from a truck at a place.\n\nPDDL Action:\n(:action Unload\n    :parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n    :effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y))\n)Allowed Predicates:\n(at ?loc - location) : the deliverer is at location loc. \n(isHomeBase ?loc - location) : the location loc is the home base of the deliverer.\n(satisfied ?loc - location) : the location loc is satisfied.\n(wantsPaper ?loc - location) : the location loc wants a paper.\n(safe ?loc - location) : the location loc is safe.\n(unpacked ?p - paper) : the paper p is unpacked.\n(carrying ?p - paper) : the paper p is being carried.\n\nInput:\nThe action, \"move\" will move the deliverer from a location \"from\" to a location \"to\".\n\nPDDL Action:\n(:action move\n    :parameters (?from - location ?to - location)\n    :precondition (and (at ?from) (safe ?from))\n    :effect (and (not (at ?from)) (at ?to))\n)\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"navigate\" will have a rover navigate from a waypoint y to a waypoint z.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Rover",
    "action": "calibrate",
    "pddl": "(:action calibrate\n    :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n    :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w) (on_board ?i ?r))\n    :effect (calibrated ?i ?r)\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "Depot",
        "action": "Drive"
      },
      {
        "domain": "BLOCKS",
        "action": "unstack"
      },
      {
        "domain": "logistics",
        "action": "LOAD-AIRPLANE"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Drive\" will drive a truck at a place y to a place z if the truck is at the location.\n\nPDDL Action:\n(:action Drive\n    :parameters (?x - truck ?y - place ?z - place)\n    :precondition (at ?x ?y)\n    :effect (and (not (at ?x ?y)) (at ?x ?z))\n)Allowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"unstack\" will unstack a block x from a block y if the block x is clear, ontop of y, and the hand is empty.\n\nPDDL Action:\n(:action unstack\n    :parameters (?x - block ?y - block)\n    :precondition (and (on ?x ?y) (clear ?x) (handempty))\n    :effect (and (holding ?x) (clear ?y) (not (clear ?x)) (not (handempty)) (not (on ?x ?y)))\n)Allowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"LOAD-AIRPLANE\" will load an airplane with a package at a given place if the package is at the location.\n\nPDDL Action:\n(:action LOAD-AIRPLANE\n    :parameters (?pkg - package ?airplane - airplane ?loc - place)\n    :precondition (and (at ?pkg ?loc) (at ?airplane ?loc))\n    :effect (and (not (at ?pkg ?loc)) (in ?pkg ?airplane))\n)\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"calibrate\" will have a rover calibrate a camera for an objective at a waypoint .\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Rover",
    "action": "calibrate",
    "pddl": "(:action calibrate\n    :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n    :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w) (on_board ?i ?r))\n    :effect (calibrated ?i ?r)\n)",
    "class": "Base",
    "context": [
      {
        "domain": "trapnewspapers",
        "action": "deliver"
      },
      {
        "domain": "miconic",
        "action": "up"
      },
      {
        "domain": "gripper-typed",
        "action": "pick"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?loc - location) : the deliverer is at location loc. \n(isHomeBase ?loc - location) : the location loc is the home base of the deliverer.\n(satisfied ?loc - location) : the location loc is satisfied.\n(wantsPaper ?loc - location) : the location loc wants a paper.\n(safe ?loc - location) : the location loc is safe.\n(unpacked ?p - paper) : the paper p is unpacked.\n(carrying ?p - paper) : the paper p is being carried.\n\nInput:\nThe action, \"deliver\" will have the deliverer drop off a paper in a location.\n\nPDDL Action:\n(:action deliver\n    :parameters (?paper - paper ?loc - location)\n    :precondition (and (at ?loc) (carrying ?paper))\n    :effect (and (not (carrying ?paper)) (not (wantsPaper ?loc)) (satisfied ?loc))\n)Allowed Predicates:\n(origin ?p - passenger ?f - floor) : passenger p starts on floor f.\n(destin ?p - passenger ?f - floor) : passenger p has floor f as their destination. \n(above ?f1 - floor  ?f2 - floor) : floor f1 is above floor f2.\n(boarded ?p - passenger) : passenger p has boarded the lift.\n(served ?p - passenger) : passenger p has been served by the lift.\n(lift-at ?f - floor) : the lift is at floor f.\n\nInput:\nThe action, \"up\" will move the lift up from a floor f1 to a floor f2.\n\nPDDL Action:\n(:action up\n    :parameters (?f1 - floor ?f2 - floor)\n    :precondition (and (lift-at ?f1) (above ?f1 ?f2))\n    :effect (and (lift-at ?f2) (not (lift-at ?f1)))\n)Allowed Predicates:\n(at-robby ?r - room) : the robot robby is at the room r.\n(at ?b - ball ?r - room) : the ball b is at the room r.\n(free ?g - gripper) : the gripper g is free.\n(carry ?o - ball ?g - gripper) : gripper g is carrying ball g.\n\nInput:\nThe action, \"pick\" will have the robot pick up a ball in a room using a gripper.\n\nPDDL Action:\n(:action pick\n    :parameters (?obj - ball ?room - room ?gripper - gripper)\n    :precondition (and (at ?obj ?room) (at-robby ?room) (free ?gripper))\n    :effect (and (carry ?obj ?gripper) (not (at ?obj ?room)) (not (free ?gripper)))\n)\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"calibrate\" will have a rover calibrate a camera for an objective at a waypoint.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Rover",
    "action": "take_image",
    "pddl": "(:action take_image\n    :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n    :precondition (and (calibrated ?i ?r) (on_board ?i ?r) (equipped_for_imaging ?r) (supports ?i ?m) (visible_from ?o ?p) (at ?r ?p))\n    :effect (and (have_image ?r ?o ?m) (not (calibrated ?i ?r)))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "logistics",
        "action": "UNLOAD-TRUCK"
      },
      {
        "domain": "Depot",
        "action": "Drop"
      },
      {
        "domain": "logistics",
        "action": "UNLOAD-AIRPLANE"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"UNLOAD-TRUCK\" will unload a package from a truck at a given place if the package is in the truck.\n\nPDDL Action:\n(:action UNLOAD-TRUCK\n    :parameters (?pkg - package ?truck - truck ?loc - place)\n    :precondition (and (at ?truck ?loc) (in ?pkg ?truck))\n    :effect (and (not (in ?pkg ?truck)) (at ?pkg ?loc))\n)Allowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Drop\" will have a hoist drop a crate onto a surface at a place if the hoist is lifting the crate and the surface is clear.\n\nPDDL Action:\n(:action Drop\n    :parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n    :effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y) (on ?y ?z))\n)Allowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"UNLOAD-AIRPLANE\" will unload a package from an airplane at a given place if the package is in the airplane.\n\nPDDL Action:\n(:action UNLOAD-AIRPLANE\n    :parameters (?pkg - package ?airplane - airplane ?loc - place)\n    :precondition (and (in ?pkg ?airplane) (at ?airplane ?loc))\n    :effect (and (not (in ?pkg ?airplane)) (at ?pkg ?loc))\n)\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"take_image\" will have a rover at a waypoint take an image of an objective in a mode if the camera is calibrated by the rover.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "Rover",
    "action": "take_image",
    "pddl": "(:action take_image\n    :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n    :precondition (and (calibrated ?i ?r) (on_board ?i ?r) (equipped_for_imaging ?r) (supports ?i ?m) (visible_from ?o ?p) (at ?r ?p))\n    :effect (and (have_image ?r ?o ?m) (not (calibrated ?i ?r)))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "hiking",
        "action": "climb"
      },
      {
        "domain": "BLOCKS",
        "action": "put-down"
      },
      {
        "domain": "trapnewspapers",
        "action": "deliver"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?loc - location) : the hikers are at the location loc.\n(isWater ?loc - location) : the location loc is water.\n(isHill ?loc - location) : the location loc is a hill.\n(adjacent ?loc1 - location ?loc2 - location) : location loc1 is adjacent to location loc2.\n(onTrail ?from - location ?to - location) : the hikers are on the trail from location from to location to.\n\nInput:\nThe action, \"climb\" will have the hikers at a location climb to another location..\n\nPDDL Action:\n(:action climb\n    :parameters (?from - location ?to - location)\n    :precondition (and (isHill ?to) (at ?from) (adjacent ?from ?to) (not (isWater ?from)))\n    :effect (and (at ?to) (not (at ?from)))\n)Allowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"put-down\" will have the hand put down a block.\n\nPDDL Action:\n(:action put-down\n    :parameters (?x - block)\n    :precondition (holding ?x)\n    :effect (and (not (holding ?x)) (clear ?x) (handempty) (ontable ?x))\n)Allowed Predicates:\n(at ?loc - location) : the deliverer is at location loc. \n(isHomeBase ?loc - location) : the location loc is the home base of the deliverer.\n(satisfied ?loc - location) : the location loc is satisfied.\n(wantsPaper ?loc - location) : the location loc wants a paper.\n(safe ?loc - location) : the location loc is safe.\n(unpacked ?p - paper) : the paper p is unpacked.\n(carrying ?p - paper) : the paper p is being carried.\n\nInput:\nThe action, \"deliver\" will have the deliverer drop off a paper in a location.\n\nPDDL Action:\n(:action deliver\n    :parameters (?paper - paper ?loc - location)\n    :precondition (and (at ?loc) (carrying ?paper))\n    :effect (and (not (carrying ?paper)) (not (wantsPaper ?loc)) (satisfied ?loc))\n)\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"take_image\" will have a rover at a waypoint take an image of an objective in a mode.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "hiking",
    "action": "climb",
    "pddl": "(:action climb\n    :parameters (?from - location ?to - location)\n    :precondition (and (isHill ?to) (at ?from) (adjacent ?from ?to) (not (isWater ?from)))\n    :effect (and (at ?to) (not (at ?from)))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "heavy-pack",
        "action": "stack"
      },
      {
        "domain": "Rover",
        "action": "drop"
      },
      {
        "domain": "track-building",
        "action": "build-track"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(heavier ?item1 - item ?item2 - item) : item1 is heavier than item2.\n(packed ?i - item) : item i is packed into the box.\n(unpacked ?i - item) : item i is unpacked from the box.\n(nothing-above ?i - item) : nothing is above item i in the box.\n(box-empty) : the box is empty.\n\nInput:\nThe action, \"stack\" will stack an item ontop of another item in the box if nothing is above the item in the box and the item being placed ontop is unpacked.\n\nPDDL Action:\n(:action stack\n    :parameters (?bottom - item ?top - item)\n    :precondition (and (packed ?bottom) (nothing-above ?bottom) (heavier ?bottom ?top) (unpacked ?top))\n    :effect (and (packed ?top) (nothing-above ?top) (not (nothing-above ?bottom)) (not (unpacked ?top)))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"drop\" will empty any items in a store from a rover if the store is full.\n\nPDDL Action:\n(:action drop\n    :parameters (?x - rover ?y - store)\n    :precondition (and (store_of ?y ?x) (full ?y))\n    :effect (and (not (full ?y)) (empty ?y))\n)Allowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"build-track\" will build track at a location .\n\nPDDL Action:\n(:action build-track\n    :parameters (?loc - location)\n    :precondition (agent-at ?loc)\n    :effect (and (has-track ?loc))\n)\n\nAllowed Predicates:\n(at ?loc - location) : the hikers are at the location loc.\n(isWater ?loc - location) : the location loc is water.\n(isHill ?loc - location) : the location loc is a hill.\n(adjacent ?loc1 - location ?loc2 - location) : location loc1 is adjacent to location loc2.\n(onTrail ?from - location ?to - location) : the hikers are on the trail from location from to location to.\n\nInput:\nThe action, \"climb\" will have the hikers at a location climb to another location. if the hikers are at the first location.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "hiking",
    "action": "climb",
    "pddl": "(:action climb\n    :parameters (?from - location ?to - location)\n    :precondition (and (isHill ?to) (at ?from) (adjacent ?from ?to) (not (isWater ?from)))\n    :effect (and (at ?to) (not (at ?from)))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "Rover",
        "action": "communicate_soil_data"
      },
      {
        "domain": "Rover",
        "action": "navigate"
      },
      {
        "domain": "Depot",
        "action": "Unload"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_soil_data\" will have a rover at a waypoint x comunicate soil data about a waypoint p via a lander at another waypoint y.\n\nPDDL Action:\n(:action communicate_soil_data\n    :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_soil_analysis ?r ?p) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_soil_data ?p) (available ?r))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"navigate\" will have a rover navigate from a waypoint y to a waypoint z.\n\nPDDL Action:\n(:action navigate\n    :parameters (?x - rover ?y - waypoint ?z - waypoint)\n    :precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) (visible ?y ?z))\n    :effect (and (not (at ?x ?y)) (at ?x ?z))\n)Allowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Unload\" will use a hoist to unload a crate from a truck at a place.\n\nPDDL Action:\n(:action Unload\n    :parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n    :effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y))\n)\n\nAllowed Predicates:\n(at ?loc - location) : the hikers are at the location loc.\n(isWater ?loc - location) : the location loc is water.\n(isHill ?loc - location) : the location loc is a hill.\n(adjacent ?loc1 - location ?loc2 - location) : location loc1 is adjacent to location loc2.\n(onTrail ?from - location ?to - location) : the hikers are on the trail from location from to location to.\n\nInput:\nThe action, \"climb\" will have the hikers at a location climb to another location..\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "hiking",
    "action": "walk",
    "pddl": "(:action walk\n    :parameters (?from - location ?to - location)\n    :precondition (and (not (isHill ?to)) (at ?from) (adjacent ?from ?to) (not (isWater ?from)))\n    :effect (and (at ?to) (not (at ?from)))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "logistics",
        "action": "FLY-AIRPLANE"
      },
      {
        "domain": "miconic",
        "action": "up"
      },
      {
        "domain": "trapnewspapers",
        "action": "move"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"FLY-AIRPLANE\" will fly an airplane from one airport to another if the airplane is at the first airport.\n\nPDDL Action:\n(:action FLY-AIRPLANE\n    :parameters (?airplane - airplane ?loc-from - airport ?loc-to - airport)\n    :precondition (at ?airplane ?loc-from)\n    :effect (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to))\n)Allowed Predicates:\n(origin ?p - passenger ?f - floor) : passenger p starts on floor f.\n(destin ?p - passenger ?f - floor) : passenger p has floor f as their destination. \n(above ?f1 - floor  ?f2 - floor) : floor f1 is above floor f2.\n(boarded ?p - passenger) : passenger p has boarded the lift.\n(served ?p - passenger) : passenger p has been served by the lift.\n(lift-at ?f - floor) : the lift is at floor f.\n\nInput:\nThe action, \"up\" will move the lift up from a floor f1 to a floor f2 if the lift is at floor 1.\n\nPDDL Action:\n(:action up\n    :parameters (?f1 - floor ?f2 - floor)\n    :precondition (and (lift-at ?f1) (above ?f1 ?f2))\n    :effect (and (lift-at ?f2) (not (lift-at ?f1)))\n)Allowed Predicates:\n(at ?loc - location) : the deliverer is at location loc. \n(isHomeBase ?loc - location) : the location loc is the home base of the deliverer.\n(satisfied ?loc - location) : the location loc is satisfied.\n(wantsPaper ?loc - location) : the location loc wants a paper.\n(safe ?loc - location) : the location loc is safe.\n(unpacked ?p - paper) : the paper p is unpacked.\n(carrying ?p - paper) : the paper p is being carried.\n\nInput:\nThe action, \"move\" will move the deliverer from a location \"from\" to a location \"to\" if the deliverer is at the \"from\" location.\n\nPDDL Action:\n(:action move\n    :parameters (?from - location ?to - location)\n    :precondition (and (at ?from) (safe ?from))\n    :effect (and (not (at ?from)) (at ?to))\n)\n\nAllowed Predicates:\n(at ?loc - location) : the hikers are at the location loc.\n(isWater ?loc - location) : the location loc is water.\n(isHill ?loc - location) : the location loc is a hill.\n(adjacent ?loc1 - location ?loc2 - location) : location loc1 is adjacent to location loc2.\n(onTrail ?from - location ?to - location) : the hikers are on the trail from location from to location to.\n\nInput:\nThe action, \"walk\" will have the hikers at a location walk to another location. if the hikers are at the first location.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "hiking",
    "action": "walk",
    "pddl": "(:action walk\n    :parameters (?from - location ?to - location)\n    :precondition (and (not (isHill ?to)) (at ?from) (adjacent ?from ?to) (not (isWater ?from)))\n    :effect (and (at ?to) (not (at ?from)))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "BLOCKS",
        "action": "put-down"
      },
      {
        "domain": "Rover",
        "action": "calibrate"
      },
      {
        "domain": "Depot",
        "action": "Unload"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"put-down\" will have the hand put down a block.\n\nPDDL Action:\n(:action put-down\n    :parameters (?x - block)\n    :precondition (holding ?x)\n    :effect (and (not (holding ?x)) (clear ?x) (handempty) (ontable ?x))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"calibrate\" will have a rover calibrate a camera for an objective at a waypoint.\n\nPDDL Action:\n(:action calibrate\n    :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n    :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w) (on_board ?i ?r))\n    :effect (calibrated ?i ?r)\n)Allowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Unload\" will use a hoist to unload a crate from a truck at a place.\n\nPDDL Action:\n(:action Unload\n    :parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n    :effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y))\n)\n\nAllowed Predicates:\n(at ?loc - location) : the hikers are at the location loc.\n(isWater ?loc - location) : the location loc is water.\n(isHill ?loc - location) : the location loc is a hill.\n(adjacent ?loc1 - location ?loc2 - location) : location loc1 is adjacent to location loc2.\n(onTrail ?from - location ?to - location) : the hikers are on the trail from location from to location to.\n\nInput:\nThe action, \"walk\" will have the hikers at a location walk to another location..\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "miconic",
    "action": "down",
    "pddl": "(:action down\n    :parameters (?f1 - floor ?f2 - floor)\n    :precondition (and (lift-at ?f1) (above ?f2 ?f1))\n    :effect (and (lift-at ?f2) (not (lift-at ?f1)))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "Rover",
        "action": "communicate_image_data"
      },
      {
        "domain": "hiking",
        "action": "walk"
      },
      {
        "domain": "trapnewspapers",
        "action": "move"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_image_data\" will have a rover at a waypoint x comunicate image data taken in a mode about an objective via a lander at a waypoint y if the rover is available and the lander has a free channel.\n\nPDDL Action:\n(:action communicate_image_data\n    :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_image ?r ?o ?m) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_image_data ?o ?m) (available ?r))\n)Allowed Predicates:\n(at ?loc - location) : the hikers are at the location loc.\n(isWater ?loc - location) : the location loc is water.\n(isHill ?loc - location) : the location loc is a hill.\n(adjacent ?loc1 - location ?loc2 - location) : location loc1 is adjacent to location loc2.\n(onTrail ?from - location ?to - location) : the hikers are on the trail from location from to location to.\n\nInput:\nThe action, \"walk\" will have the hikers at a location walk to another location. if the hikers are at the first location.\n\nPDDL Action:\n(:action walk\n    :parameters (?from - location ?to - location)\n    :precondition (and (not (isHill ?to)) (at ?from) (adjacent ?from ?to) (not (isWater ?from)))\n    :effect (and (at ?to) (not (at ?from)))\n)Allowed Predicates:\n(at ?loc - location) : the deliverer is at location loc. \n(isHomeBase ?loc - location) : the location loc is the home base of the deliverer.\n(satisfied ?loc - location) : the location loc is satisfied.\n(wantsPaper ?loc - location) : the location loc wants a paper.\n(safe ?loc - location) : the location loc is safe.\n(unpacked ?p - paper) : the paper p is unpacked.\n(carrying ?p - paper) : the paper p is being carried.\n\nInput:\nThe action, \"move\" will move the deliverer from a location \"from\" to a location \"to\" if the deliverer is at the \"from\" location.\n\nPDDL Action:\n(:action move\n    :parameters (?from - location ?to - location)\n    :precondition (and (at ?from) (safe ?from))\n    :effect (and (not (at ?from)) (at ?to))\n)\n\nAllowed Predicates:\n(origin ?p - passenger ?f - floor) : passenger p starts on floor f.\n(destin ?p - passenger ?f - floor) : passenger p has floor f as their destination. \n(above ?f1 - floor  ?f2 - floor) : floor f1 is above floor f2.\n(boarded ?p - passenger) : passenger p has boarded the lift.\n(served ?p - passenger) : passenger p has been served by the lift.\n(lift-at ?f - floor) : the lift is at floor f.\n\nInput:\nThe action, \"down\" will move the lift down from a floor f1 to a floor f2 if the lift is at f1.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "miconic",
    "action": "down",
    "pddl": "(:action down\n    :parameters (?f1 - floor ?f2 - floor)\n    :precondition (and (lift-at ?f1) (above ?f2 ?f1))\n    :effect (and (lift-at ?f2) (not (lift-at ?f1)))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "Rover",
        "action": "communicate_rock_data"
      },
      {
        "domain": "Rover",
        "action": "sample_rock"
      },
      {
        "domain": "logistics",
        "action": "UNLOAD-TRUCK"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_rock_data\" will have a rover at a waypoint x comunicate rock data about a waypoint p via a lander at another waypoint y.\n\nPDDL Action:\n(:action communicate_rock_data\n    :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_rock_analysis ?r ?p) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_rock_data ?p) (available ?r))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"sample_rock\" will have a rover sample a rock into a store at a waypoint.\n\nPDDL Action:\n(:action sample_rock\n    :parameters (?x - rover ?s - store ?p - waypoint)\n    :precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x) (empty ?s))\n    :effect (and (not (empty ?s)) (full ?s) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p)))\n)Allowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"UNLOAD-TRUCK\" will unload a package from a truck at a given place.\n\nPDDL Action:\n(:action UNLOAD-TRUCK\n    :parameters (?pkg - package ?truck - truck ?loc - place)\n    :precondition (and (at ?truck ?loc) (in ?pkg ?truck))\n    :effect (and (not (in ?pkg ?truck)) (at ?pkg ?loc))\n)\n\nAllowed Predicates:\n(origin ?p - passenger ?f - floor) : passenger p starts on floor f.\n(destin ?p - passenger ?f - floor) : passenger p has floor f as their destination. \n(above ?f1 - floor  ?f2 - floor) : floor f1 is above floor f2.\n(boarded ?p - passenger) : passenger p has boarded the lift.\n(served ?p - passenger) : passenger p has been served by the lift.\n(lift-at ?f - floor) : the lift is at floor f.\n\nInput:\nThe action, \"down\" will move the lift down from a floor f1 to a floor f2.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "miconic",
    "action": "depart",
    "pddl": "(:action depart\n    :parameters (?f - floor ?p - passenger)\n    :precondition (and (lift-at ?f) (destin ?p ?f) (boarded ?p))\n    :effect (and (not (boarded ?p)) (served ?p))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "BLOCKS",
        "action": "unstack"
      },
      {
        "domain": "Rover",
        "action": "communicate_soil_data"
      },
      {
        "domain": "hiking",
        "action": "walk"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"unstack\" will unstack a block x from a block y if the block x is clear, ontop of y, and the hand is empty.\n\nPDDL Action:\n(:action unstack\n    :parameters (?x - block ?y - block)\n    :precondition (and (on ?x ?y) (clear ?x) (handempty))\n    :effect (and (holding ?x) (clear ?y) (not (clear ?x)) (not (handempty)) (not (on ?x ?y)))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_soil_data\" will have a rover at a waypoint x comunicate soil data about a waypoint p via a lander at another waypoint y if the rover is available and the lander has a free channel.\n\nPDDL Action:\n(:action communicate_soil_data\n    :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_soil_analysis ?r ?p) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_soil_data ?p) (available ?r))\n)Allowed Predicates:\n(at ?loc - location) : the hikers are at the location loc.\n(isWater ?loc - location) : the location loc is water.\n(isHill ?loc - location) : the location loc is a hill.\n(adjacent ?loc1 - location ?loc2 - location) : location loc1 is adjacent to location loc2.\n(onTrail ?from - location ?to - location) : the hikers are on the trail from location from to location to.\n\nInput:\nThe action, \"walk\" will have the hikers at a location walk to another location. if the hikers are at the first location.\n\nPDDL Action:\n(:action walk\n    :parameters (?from - location ?to - location)\n    :precondition (and (not (isHill ?to)) (at ?from) (adjacent ?from ?to) (not (isWater ?from)))\n    :effect (and (at ?to) (not (at ?from)))\n)\n\nAllowed Predicates:\n(origin ?p - passenger ?f - floor) : passenger p starts on floor f.\n(destin ?p - passenger ?f - floor) : passenger p has floor f as their destination. \n(above ?f1 - floor  ?f2 - floor) : floor f1 is above floor f2.\n(boarded ?p - passenger) : passenger p has boarded the lift.\n(served ?p - passenger) : passenger p has been served by the lift.\n(lift-at ?f - floor) : the lift is at floor f.\n\nInput:\nThe action, \"depart\" will have a passenger depart the lift at a floor if the passanger has boarded the lift.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "miconic",
    "action": "depart",
    "pddl": "(:action depart\n    :parameters (?f - floor ?p - passenger)\n    :precondition (and (lift-at ?f) (destin ?p ?f) (boarded ?p))\n    :effect (and (not (boarded ?p)) (served ?p))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "track-building",
        "action": "move-agent"
      },
      {
        "domain": "Depot",
        "action": "Unload"
      },
      {
        "domain": "Rover",
        "action": "sample_soil"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"move-agent\" will move an agent from a location current-loc to a location next-loc.\n\nPDDL Action:\n(:action move-agent\n    :parameters (?current-loc - location ?next-loc - location)\n    :precondition (agent-at ?current-loc)\n    :effect (and (agent-at ?next-loc) (not (agent-at ?current-loc)))\n)Allowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Unload\" will use a hoist to unload a crate from a truck at a place.\n\nPDDL Action:\n(:action Unload\n    :parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n    :effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"sample_soil\" will have a rover sample soil into a store at a waypoint.\n\nPDDL Action:\n(:action sample_soil\n    :parameters (?x - rover ?s - store ?p - waypoint)\n    :precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s))\n    :effect (and (not (empty ?s)) (full ?s) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p)))\n)\n\nAllowed Predicates:\n(origin ?p - passenger ?f - floor) : passenger p starts on floor f.\n(destin ?p - passenger ?f - floor) : passenger p has floor f as their destination. \n(above ?f1 - floor  ?f2 - floor) : floor f1 is above floor f2.\n(boarded ?p - passenger) : passenger p has boarded the lift.\n(served ?p - passenger) : passenger p has been served by the lift.\n(lift-at ?f - floor) : the lift is at floor f.\n\nInput:\nThe action, \"depart\" will have a passenger depart the lift at a floor.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "miconic",
    "action": "board",
    "pddl": "(:action board\n    :parameters (?f - floor ?p - passenger)\n    :precondition (and (lift-at ?f) (origin ?p ?f))\n    :effect (and (boarded ?p))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "Depot",
        "action": "Unload"
      },
      {
        "domain": "gripper-typed",
        "action": "drop"
      },
      {
        "domain": "gripper-typed",
        "action": "pick"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Unload\" will use a hoist to unload a crate from a truck at a place if the hoist is available and the crate is in the truck.\n\nPDDL Action:\n(:action Unload\n    :parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n    :effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y))\n)Allowed Predicates:\n(at-robby ?r - room) : the robot robby is at the room r.\n(at ?b - ball ?r - room) : the ball b is at the room r.\n(free ?g - gripper) : the gripper g is free.\n(carry ?o - ball ?g - gripper) : gripper g is carrying ball g.\n\nInput:\nThe action, \"drop\" will drop a ball in a room using a gripper if the ball is being caried by the gripper.\n\nPDDL Action:\n(:action drop\n    :parameters (?obj - ball ?room - room ?gripper - gripper)\n    :precondition (and (carry ?obj ?gripper) (at-robby ?room))\n    :effect (and (at ?obj ?room) (free ?gripper) (not (carry ?obj ?gripper)))\n)Allowed Predicates:\n(at-robby ?r - room) : the robot robby is at the room r.\n(at ?b - ball ?r - room) : the ball b is at the room r.\n(free ?g - gripper) : the gripper g is free.\n(carry ?o - ball ?g - gripper) : gripper g is carrying ball g.\n\nInput:\nThe action, \"pick\" will have the robot pick up a ball in a room using a gripper if the gripper is free and the ball is in the room.\n\nPDDL Action:\n(:action pick\n    :parameters (?obj - ball ?room - room ?gripper - gripper)\n    :precondition (and (at ?obj ?room) (at-robby ?room) (free ?gripper))\n    :effect (and (carry ?obj ?gripper) (not (at ?obj ?room)) (not (free ?gripper)))\n)\n\nAllowed Predicates:\n(origin ?p - passenger ?f - floor) : passenger p starts on floor f.\n(destin ?p - passenger ?f - floor) : passenger p has floor f as their destination. \n(above ?f1 - floor  ?f2 - floor) : floor f1 is above floor f2.\n(boarded ?p - passenger) : passenger p has boarded the lift.\n(served ?p - passenger) : passenger p has been served by the lift.\n(lift-at ?f - floor) : the lift is at floor f.\n\nInput:\nThe action, \"board\" will have a passenger at a floor board the lift .\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "miconic",
    "action": "board",
    "pddl": "(:action board\n    :parameters (?f - floor ?p - passenger)\n    :precondition (and (lift-at ?f) (origin ?p ?f))\n    :effect (and (boarded ?p))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "Depot",
        "action": "Drive"
      },
      {
        "domain": "gripper-typed",
        "action": "pick"
      },
      {
        "domain": "heavy-pack",
        "action": "stack"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Drive\" will drive a truck at a place y to a place z.\n\nPDDL Action:\n(:action Drive\n    :parameters (?x - truck ?y - place ?z - place)\n    :precondition (at ?x ?y)\n    :effect (and (not (at ?x ?y)) (at ?x ?z))\n)Allowed Predicates:\n(at-robby ?r - room) : the robot robby is at the room r.\n(at ?b - ball ?r - room) : the ball b is at the room r.\n(free ?g - gripper) : the gripper g is free.\n(carry ?o - ball ?g - gripper) : gripper g is carrying ball g.\n\nInput:\nThe action, \"pick\" will have the robot pick up a ball in a room using a gripper.\n\nPDDL Action:\n(:action pick\n    :parameters (?obj - ball ?room - room ?gripper - gripper)\n    :precondition (and (at ?obj ?room) (at-robby ?room) (free ?gripper))\n    :effect (and (carry ?obj ?gripper) (not (at ?obj ?room)) (not (free ?gripper)))\n)Allowed Predicates:\n(heavier ?item1 - item ?item2 - item) : item1 is heavier than item2.\n(packed ?i - item) : item i is packed into the box.\n(unpacked ?i - item) : item i is unpacked from the box.\n(nothing-above ?i - item) : nothing is above item i in the box.\n(box-empty) : the box is empty.\n\nInput:\nThe action, \"stack\" will stack an item ontop of another item in the box.\n\nPDDL Action:\n(:action stack\n    :parameters (?bottom - item ?top - item)\n    :precondition (and (packed ?bottom) (nothing-above ?bottom) (heavier ?bottom ?top) (unpacked ?top))\n    :effect (and (packed ?top) (nothing-above ?top) (not (nothing-above ?bottom)) (not (unpacked ?top)))\n)\n\nAllowed Predicates:\n(origin ?p - passenger ?f - floor) : passenger p starts on floor f.\n(destin ?p - passenger ?f - floor) : passenger p has floor f as their destination. \n(above ?f1 - floor  ?f2 - floor) : floor f1 is above floor f2.\n(boarded ?p - passenger) : passenger p has boarded the lift.\n(served ?p - passenger) : passenger p has been served by the lift.\n(lift-at ?f - floor) : the lift is at floor f.\n\nInput:\nThe action, \"board\" will have a passenger at a floor board the lift.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "miconic",
    "action": "up",
    "pddl": "(:action up\n    :parameters (?f1 - floor ?f2 - floor)\n    :precondition (and (lift-at ?f1) (above ?f1 ?f2))\n    :effect (and (lift-at ?f2) (not (lift-at ?f1)))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "Depot",
        "action": "Load"
      },
      {
        "domain": "gripper-typed",
        "action": "pick"
      },
      {
        "domain": "Rover",
        "action": "navigate"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Load\" will use a hoist to load a crate into a truck at a place if the hoist is lifting the crate.\n\nPDDL Action:\n(:action Load\n    :parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))\n    :effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x))\n)Allowed Predicates:\n(at-robby ?r - room) : the robot robby is at the room r.\n(at ?b - ball ?r - room) : the ball b is at the room r.\n(free ?g - gripper) : the gripper g is free.\n(carry ?o - ball ?g - gripper) : gripper g is carrying ball g.\n\nInput:\nThe action, \"pick\" will have the robot pick up a ball in a room using a gripper if the gripper is free and the ball is in the room.\n\nPDDL Action:\n(:action pick\n    :parameters (?obj - ball ?room - room ?gripper - gripper)\n    :precondition (and (at ?obj ?room) (at-robby ?room) (free ?gripper))\n    :effect (and (carry ?obj ?gripper) (not (at ?obj ?room)) (not (free ?gripper)))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"navigate\" will have a rover navigate from a waypoint y to a waypoint z if the rover is at waypoint y.\n\nPDDL Action:\n(:action navigate\n    :parameters (?x - rover ?y - waypoint ?z - waypoint)\n    :precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) (visible ?y ?z))\n    :effect (and (not (at ?x ?y)) (at ?x ?z))\n)\n\nAllowed Predicates:\n(origin ?p - passenger ?f - floor) : passenger p starts on floor f.\n(destin ?p - passenger ?f - floor) : passenger p has floor f as their destination. \n(above ?f1 - floor  ?f2 - floor) : floor f1 is above floor f2.\n(boarded ?p - passenger) : passenger p has boarded the lift.\n(served ?p - passenger) : passenger p has been served by the lift.\n(lift-at ?f - floor) : the lift is at floor f.\n\nInput:\nThe action, \"up\" will move the lift up from a floor f1 to a floor f2 if the lift is at floor 1.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "miconic",
    "action": "up",
    "pddl": "(:action up\n    :parameters (?f1 - floor ?f2 - floor)\n    :precondition (and (lift-at ?f1) (above ?f1 ?f2))\n    :effect (and (lift-at ?f2) (not (lift-at ?f1)))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "Depot",
        "action": "Drop"
      },
      {
        "domain": "track-building",
        "action": "move-agent"
      },
      {
        "domain": "track-building",
        "action": "build-track"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Drop\" will have a hoist drop a crate onto a surface at a place.\n\nPDDL Action:\n(:action Drop\n    :parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n    :effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y) (on ?y ?z))\n)Allowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"move-agent\" will move an agent from a location current-loc to a location next-loc.\n\nPDDL Action:\n(:action move-agent\n    :parameters (?current-loc - location ?next-loc - location)\n    :precondition (agent-at ?current-loc)\n    :effect (and (agent-at ?next-loc) (not (agent-at ?current-loc)))\n)Allowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"build-track\" will build track at a location.\n\nPDDL Action:\n(:action build-track\n    :parameters (?loc - location)\n    :precondition (agent-at ?loc)\n    :effect (and (has-track ?loc))\n)\n\nAllowed Predicates:\n(origin ?p - passenger ?f - floor) : passenger p starts on floor f.\n(destin ?p - passenger ?f - floor) : passenger p has floor f as their destination. \n(above ?f1 - floor  ?f2 - floor) : floor f1 is above floor f2.\n(boarded ?p - passenger) : passenger p has boarded the lift.\n(served ?p - passenger) : passenger p has been served by the lift.\n(lift-at ?f - floor) : the lift is at floor f.\n\nInput:\nThe action, \"up\" will move the lift up from a floor f1 to a floor f2.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "track-building",
    "action": "move-train",
    "pddl": "(:action move-train\n    :parameters (?current-loc - location ?next-loc - location)\n    :precondition (and (train-at ?current-loc) (has-track ?next-loc) (forward ?current-loc ?next-loc))\n    :effect (and (train-at ?next-loc) (not (train-at ?current-loc)))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "Rover",
        "action": "sample_soil"
      },
      {
        "domain": "BLOCKS",
        "action": "stack"
      },
      {
        "domain": "Rover",
        "action": "sample_rock"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"sample_soil\" will have a rover sample soil into a store at a waypoint if the waypoint is at a soil sample and the store is empty.\n\nPDDL Action:\n(:action sample_soil\n    :parameters (?x - rover ?s - store ?p - waypoint)\n    :precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s))\n    :effect (and (not (empty ?s)) (full ?s) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p)))\n)Allowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"stack\" will stack a block x onto block y if the block y is clear and the hand is holding the block x.\n\nPDDL Action:\n(:action stack\n    :parameters (?x - block ?y - block)\n    :precondition (and (holding ?x) (clear ?y))\n    :effect (and (not (holding ?x)) (not (clear ?y)) (clear ?x) (handempty) (on ?x ?y))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"sample_rock\" will have a rover sample a rock into a store at a waypoint if the waypoint is at a rock sample and the store is empty.\n\nPDDL Action:\n(:action sample_rock\n    :parameters (?x - rover ?s - store ?p - waypoint)\n    :precondition (and (at ?x ?p) (at_rock_sample ?p) (equipped_for_rock_analysis ?x) (store_of ?s ?x) (empty ?s))\n    :effect (and (not (empty ?s)) (full ?s) (have_rock_analysis ?x ?p) (not (at_rock_sample ?p)))\n)\n\nAllowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"move-train\" will move the train from a location current-loc to a location next-loc if the train is at the current location.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "track-building",
    "action": "move-train",
    "pddl": "(:action move-train\n    :parameters (?current-loc - location ?next-loc - location)\n    :precondition (and (train-at ?current-loc) (has-track ?next-loc) (forward ?current-loc ?next-loc))\n    :effect (and (train-at ?next-loc) (not (train-at ?current-loc)))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "Rover",
        "action": "communicate_soil_data"
      },
      {
        "domain": "Rover",
        "action": "calibrate"
      },
      {
        "domain": "BLOCKS",
        "action": "put-down"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_soil_data\" will have a rover at a waypoint x comunicate soil data about a waypoint p via a lander at another waypoint y.\n\nPDDL Action:\n(:action communicate_soil_data\n    :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_soil_analysis ?r ?p) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_soil_data ?p) (available ?r))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"calibrate\" will have a rover calibrate a camera for an objective at a waypoint.\n\nPDDL Action:\n(:action calibrate\n    :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n    :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w) (on_board ?i ?r))\n    :effect (calibrated ?i ?r)\n)Allowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"put-down\" will have the hand put down a block.\n\nPDDL Action:\n(:action put-down\n    :parameters (?x - block)\n    :precondition (holding ?x)\n    :effect (and (not (holding ?x)) (clear ?x) (handempty) (ontable ?x))\n)\n\nAllowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"move-train\" will move the train from a location current-loc to a location next-loc.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "track-building",
    "action": "build-track",
    "pddl": "(:action build-track\n    :parameters (?loc - location)\n    :precondition (agent-at ?loc)\n    :effect (and (has-track ?loc))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "Depot",
        "action": "Drive"
      },
      {
        "domain": "Rover",
        "action": "calibrate"
      },
      {
        "domain": "logistics",
        "action": "UNLOAD-TRUCK"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Drive\" will drive a truck at a place y to a place z if the truck is at the location.\n\nPDDL Action:\n(:action Drive\n    :parameters (?x - truck ?y - place ?z - place)\n    :precondition (at ?x ?y)\n    :effect (and (not (at ?x ?y)) (at ?x ?z))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"calibrate\" will have a rover calibrate a camera for an objective at a waypoint .\n\nPDDL Action:\n(:action calibrate\n    :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n    :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w) (on_board ?i ?r))\n    :effect (calibrated ?i ?r)\n)Allowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"UNLOAD-TRUCK\" will unload a package from a truck at a given place if the package is in the truck.\n\nPDDL Action:\n(:action UNLOAD-TRUCK\n    :parameters (?pkg - package ?truck - truck ?loc - place)\n    :precondition (and (at ?truck ?loc) (in ?pkg ?truck))\n    :effect (and (not (in ?pkg ?truck)) (at ?pkg ?loc))\n)\n\nAllowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"build-track\" will build track at a location .\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "track-building",
    "action": "build-track",
    "pddl": "(:action build-track\n    :parameters (?loc - location)\n    :precondition (agent-at ?loc)\n    :effect (and (has-track ?loc))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "Rover",
        "action": "communicate_rock_data"
      },
      {
        "domain": "heavy-pack",
        "action": "stack"
      },
      {
        "domain": "logistics",
        "action": "DRIVE-TRUCK"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_rock_data\" will have a rover at a waypoint x comunicate rock data about a waypoint p via a lander at another waypoint y.\n\nPDDL Action:\n(:action communicate_rock_data\n    :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_rock_analysis ?r ?p) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_rock_data ?p) (available ?r))\n)Allowed Predicates:\n(heavier ?item1 - item ?item2 - item) : item1 is heavier than item2.\n(packed ?i - item) : item i is packed into the box.\n(unpacked ?i - item) : item i is unpacked from the box.\n(nothing-above ?i - item) : nothing is above item i in the box.\n(box-empty) : the box is empty.\n\nInput:\nThe action, \"stack\" will stack an item ontop of another item in the box.\n\nPDDL Action:\n(:action stack\n    :parameters (?bottom - item ?top - item)\n    :precondition (and (packed ?bottom) (nothing-above ?bottom) (heavier ?bottom ?top) (unpacked ?top))\n    :effect (and (packed ?top) (nothing-above ?top) (not (nothing-above ?bottom)) (not (unpacked ?top)))\n)Allowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"DRIVE-TRUCK\" will drive a truck from a location to another in a given city.\n\nPDDL Action:\n(:action DRIVE-TRUCK\n    :parameters (?truck - truck ?loc-from - place ?loc-to - place ?city - city)\n    :precondition (and (at ?truck ?loc-from) (in-city ?loc-from ?city) (in-city ?loc-to ?city))\n    :effect (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to))\n)\n\nAllowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"build-track\" will build track at a location.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "track-building",
    "action": "move-agent",
    "pddl": "(:action move-agent\n    :parameters (?current-loc - location ?next-loc - location)\n    :precondition (agent-at ?current-loc)\n    :effect (and (agent-at ?next-loc) (not (agent-at ?current-loc)))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "Rover",
        "action": "communicate_soil_data"
      },
      {
        "domain": "logistics",
        "action": "LOAD-TRUCK"
      },
      {
        "domain": "Rover",
        "action": "take_image"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_soil_data\" will have a rover at a waypoint x comunicate soil data about a waypoint p via a lander at another waypoint y if the rover is available and the lander has a free channel.\n\nPDDL Action:\n(:action communicate_soil_data\n    :parameters (?r - rover ?l - lander ?p - waypoint ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_soil_analysis ?r ?p) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_soil_data ?p) (available ?r))\n)Allowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"LOAD-TRUCK\" will place a package in a truck at a given place if the package is at the place.\n\nPDDL Action:\n(:action LOAD-TRUCK\n    :parameters (?pkg - package ?truck - truck ?loc - place)\n    :precondition (and (at ?truck ?loc) (at ?pkg ?loc))\n    :effect (and (not (at ?pkg ?loc)) (in ?pkg ?truck))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"take_image\" will have a rover at a waypoint take an image of an objective in a mode if the camera is calibrated by the rover.\n\nPDDL Action:\n(:action take_image\n    :parameters (?r - rover ?p - waypoint ?o - objective ?i - camera ?m - mode)\n    :precondition (and (calibrated ?i ?r) (on_board ?i ?r) (equipped_for_imaging ?r) (supports ?i ?m) (visible_from ?o ?p) (at ?r ?p))\n    :effect (and (have_image ?r ?o ?m) (not (calibrated ?i ?r)))\n)\n\nAllowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"move-agent\" will move an agent from a location current-loc to a location next-loc if the agent is at the current location.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "track-building",
    "action": "move-agent",
    "pddl": "(:action move-agent\n    :parameters (?current-loc - location ?next-loc - location)\n    :precondition (agent-at ?current-loc)\n    :effect (and (agent-at ?next-loc) (not (agent-at ?current-loc)))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "miconic",
        "action": "board"
      },
      {
        "domain": "logistics",
        "action": "UNLOAD-TRUCK"
      },
      {
        "domain": "Depot",
        "action": "Load"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(origin ?p - passenger ?f - floor) : passenger p starts on floor f.\n(destin ?p - passenger ?f - floor) : passenger p has floor f as their destination. \n(above ?f1 - floor  ?f2 - floor) : floor f1 is above floor f2.\n(boarded ?p - passenger) : passenger p has boarded the lift.\n(served ?p - passenger) : passenger p has been served by the lift.\n(lift-at ?f - floor) : the lift is at floor f.\n\nInput:\nThe action, \"board\" will have a passenger at a floor board the lift.\n\nPDDL Action:\n(:action board\n    :parameters (?f - floor ?p - passenger)\n    :precondition (and (lift-at ?f) (origin ?p ?f))\n    :effect (and (boarded ?p))\n)Allowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"UNLOAD-TRUCK\" will unload a package from a truck at a given place.\n\nPDDL Action:\n(:action UNLOAD-TRUCK\n    :parameters (?pkg - package ?truck - truck ?loc - place)\n    :precondition (and (at ?truck ?loc) (in ?pkg ?truck))\n    :effect (and (not (in ?pkg ?truck)) (at ?pkg ?loc))\n)Allowed Predicates:\n(at ?x - locatable ?y - place) : the locatable x is at some place.\n(on ?x - crate ?y - surface) : crate x is on a surface y.\n(in ?x - crate ?y - truck) : crate x is in truck y. \n(lifting ?x - hoist ?y - crate) : hoist x is lifting crate y.\n(available ?x - hoist) : hoist x is available.\n(clear ?x - surface) : surface x is clear.\n\nInput:\nThe action, \"Load\" will use a hoist to load a crate into a truck at a place.\n\nPDDL Action:\n(:action Load\n    :parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n    :precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))\n    :effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x))\n)\n\nAllowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"move-agent\" will move an agent from a location current-loc to a location next-loc.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "trapnewspapers",
    "action": "pick-up",
    "pddl": "(:action pick-up\n    :parameters (?paper - paper ?loc - location)\n    :precondition (and (at ?loc) (isHomeBase ?loc) (unpacked ?paper))\n    :effect (and (not (unpacked ?paper)) (carrying ?paper))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "miconic",
        "action": "board"
      },
      {
        "domain": "BLOCKS",
        "action": "pick-up"
      },
      {
        "domain": "logistics",
        "action": "LOAD-TRUCK"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(origin ?p - passenger ?f - floor) : passenger p starts on floor f.\n(destin ?p - passenger ?f - floor) : passenger p has floor f as their destination. \n(above ?f1 - floor  ?f2 - floor) : floor f1 is above floor f2.\n(boarded ?p - passenger) : passenger p has boarded the lift.\n(served ?p - passenger) : passenger p has been served by the lift.\n(lift-at ?f - floor) : the lift is at floor f.\n\nInput:\nThe action, \"board\" will have a passenger at a floor board the lift .\n\nPDDL Action:\n(:action board\n    :parameters (?f - floor ?p - passenger)\n    :precondition (and (lift-at ?f) (origin ?p ?f))\n    :effect (and (boarded ?p))\n)Allowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"pick-up\" will have the hand pick up a block if the block is on the table clear and the hand is empty.\n\nPDDL Action:\n(:action pick-up\n    :parameters (?x - block)\n    :precondition (and (clear ?x) (ontable ?x) (handempty))\n    :effect (and (not (ontable ?x)) (not (clear ?x)) (not (handempty)) (holding ?x))\n)Allowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"LOAD-TRUCK\" will place a package in a truck at a given place if the package is at the place.\n\nPDDL Action:\n(:action LOAD-TRUCK\n    :parameters (?pkg - package ?truck - truck ?loc - place)\n    :precondition (and (at ?truck ?loc) (at ?pkg ?loc))\n    :effect (and (not (at ?pkg ?loc)) (in ?pkg ?truck))\n)\n\nAllowed Predicates:\n(at ?loc - location) : the deliverer is at location loc. \n(isHomeBase ?loc - location) : the location loc is the home base of the deliverer.\n(satisfied ?loc - location) : the location loc is satisfied.\n(wantsPaper ?loc - location) : the location loc wants a paper.\n(safe ?loc - location) : the location loc is safe.\n(unpacked ?p - paper) : the paper p is unpacked.\n(carrying ?p - paper) : the paper p is being carried.\n\nInput:\nThe action, \"pick-up\" will have the deliverer pick up a paper at a location if the paper is unpacked.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "trapnewspapers",
    "action": "pick-up",
    "pddl": "(:action pick-up\n    :parameters (?paper - paper ?loc - location)\n    :precondition (and (at ?loc) (isHomeBase ?loc) (unpacked ?paper))\n    :effect (and (not (unpacked ?paper)) (carrying ?paper))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "track-building",
        "action": "move-agent"
      },
      {
        "domain": "Rover",
        "action": "sample_soil"
      },
      {
        "domain": "hiking",
        "action": "climb"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"move-agent\" will move an agent from a location current-loc to a location next-loc.\n\nPDDL Action:\n(:action move-agent\n    :parameters (?current-loc - location ?next-loc - location)\n    :precondition (agent-at ?current-loc)\n    :effect (and (agent-at ?next-loc) (not (agent-at ?current-loc)))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"sample_soil\" will have a rover sample soil into a store at a waypoint.\n\nPDDL Action:\n(:action sample_soil\n    :parameters (?x - rover ?s - store ?p - waypoint)\n    :precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s))\n    :effect (and (not (empty ?s)) (full ?s) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p)))\n)Allowed Predicates:\n(at ?loc - location) : the hikers are at the location loc.\n(isWater ?loc - location) : the location loc is water.\n(isHill ?loc - location) : the location loc is a hill.\n(adjacent ?loc1 - location ?loc2 - location) : location loc1 is adjacent to location loc2.\n(onTrail ?from - location ?to - location) : the hikers are on the trail from location from to location to.\n\nInput:\nThe action, \"climb\" will have the hikers at a location climb to another location..\n\nPDDL Action:\n(:action climb\n    :parameters (?from - location ?to - location)\n    :precondition (and (isHill ?to) (at ?from) (adjacent ?from ?to) (not (isWater ?from)))\n    :effect (and (at ?to) (not (at ?from)))\n)\n\nAllowed Predicates:\n(at ?loc - location) : the deliverer is at location loc. \n(isHomeBase ?loc - location) : the location loc is the home base of the deliverer.\n(satisfied ?loc - location) : the location loc is satisfied.\n(wantsPaper ?loc - location) : the location loc wants a paper.\n(safe ?loc - location) : the location loc is safe.\n(unpacked ?p - paper) : the paper p is unpacked.\n(carrying ?p - paper) : the paper p is being carried.\n\nInput:\nThe action, \"pick-up\" will have the deliverer pick up a paper at a location.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "trapnewspapers",
    "action": "move",
    "pddl": "(:action move\n    :parameters (?from - location ?to - location)\n    :precondition (and (at ?from) (safe ?from))\n    :effect (and (not (at ?from)) (at ?to))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "Rover",
        "action": "calibrate"
      },
      {
        "domain": "BLOCKS",
        "action": "put-down"
      },
      {
        "domain": "Rover",
        "action": "communicate_image_data"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"calibrate\" will have a rover calibrate a camera for an objective at a waypoint .\n\nPDDL Action:\n(:action calibrate\n    :parameters (?r - rover ?i - camera ?t - objective ?w - waypoint)\n    :precondition (and (equipped_for_imaging ?r) (calibration_target ?i ?t) (at ?r ?w) (visible_from ?t ?w) (on_board ?i ?r))\n    :effect (calibrated ?i ?r)\n)Allowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"put-down\" will have the hand put down a block if the block is being held.\n\nPDDL Action:\n(:action put-down\n    :parameters (?x - block)\n    :precondition (holding ?x)\n    :effect (and (not (holding ?x)) (clear ?x) (handempty) (ontable ?x))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"communicate_image_data\" will have a rover at a waypoint x comunicate image data taken in a mode about an objective via a lander at a waypoint y if the rover is available and the lander has a free channel.\n\nPDDL Action:\n(:action communicate_image_data\n    :parameters (?r - rover ?l - lander ?o - objective ?m - mode ?x - waypoint ?y - waypoint)\n    :precondition (and (at ?r ?x) (at_lander ?l ?y) (have_image ?r ?o ?m) (visible ?x ?y) (available ?r) (channel_free ?l))\n    :effect (and (not (available ?r)) (not (channel_free ?l)) (channel_free ?l) (communicated_image_data ?o ?m) (available ?r))\n)\n\nAllowed Predicates:\n(at ?loc - location) : the deliverer is at location loc. \n(isHomeBase ?loc - location) : the location loc is the home base of the deliverer.\n(satisfied ?loc - location) : the location loc is satisfied.\n(wantsPaper ?loc - location) : the location loc wants a paper.\n(safe ?loc - location) : the location loc is safe.\n(unpacked ?p - paper) : the paper p is unpacked.\n(carrying ?p - paper) : the paper p is being carried.\n\nInput:\nThe action, \"move\" will move the deliverer from a location \"from\" to a location \"to\" if the deliverer is at the \"from\" location.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "trapnewspapers",
    "action": "move",
    "pddl": "(:action move\n    :parameters (?from - location ?to - location)\n    :precondition (and (at ?from) (safe ?from))\n    :effect (and (not (at ?from)) (at ?to))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "Rover",
        "action": "navigate"
      },
      {
        "domain": "BLOCKS",
        "action": "unstack"
      },
      {
        "domain": "logistics",
        "action": "LOAD-TRUCK"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"navigate\" will have a rover navigate from a waypoint y to a waypoint z.\n\nPDDL Action:\n(:action navigate\n    :parameters (?x - rover ?y - waypoint ?z - waypoint)\n    :precondition (and (can_traverse ?x ?y ?z) (available ?x) (at ?x ?y) (visible ?y ?z))\n    :effect (and (not (at ?x ?y)) (at ?x ?z))\n)Allowed Predicates:\n(handempty) : the hand is empty.\n(holding ?x - block): block x is held.\n(clear ?x - block): block x is clear.\n(on ?x - block ?y - block) : block x is on block y.\n(ontable ?x - block): block x is on the table.\n\nInput:\nThe action, \"unstack\" will unstack a block x from a block y.\n\nPDDL Action:\n(:action unstack\n    :parameters (?x - block ?y - block)\n    :precondition (and (on ?x ?y) (clear ?x) (handempty))\n    :effect (and (holding ?x) (clear ?y) (not (clear ?x)) (not (handempty)) (not (on ?x ?y)))\n)Allowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"LOAD-TRUCK\" will place a package in a truck at a given place.\n\nPDDL Action:\n(:action LOAD-TRUCK\n    :parameters (?pkg - package ?truck - truck ?loc - place)\n    :precondition (and (at ?truck ?loc) (at ?pkg ?loc))\n    :effect (and (not (at ?pkg ?loc)) (in ?pkg ?truck))\n)\n\nAllowed Predicates:\n(at ?loc - location) : the deliverer is at location loc. \n(isHomeBase ?loc - location) : the location loc is the home base of the deliverer.\n(satisfied ?loc - location) : the location loc is satisfied.\n(wantsPaper ?loc - location) : the location loc wants a paper.\n(safe ?loc - location) : the location loc is safe.\n(unpacked ?p - paper) : the paper p is unpacked.\n(carrying ?p - paper) : the paper p is being carried.\n\nInput:\nThe action, \"move\" will move the deliverer from a location \"from\" to a location \"to\".\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "trapnewspapers",
    "action": "deliver",
    "pddl": "(:action deliver\n    :parameters (?paper - paper ?loc - location)\n    :precondition (and (at ?loc) (carrying ?paper))\n    :effect (and (not (carrying ?paper)) (not (wantsPaper ?loc)) (satisfied ?loc))\n)",
    "class": "Flipped",
    "context": [
      {
        "domain": "Rover",
        "action": "sample_soil"
      },
      {
        "domain": "logistics",
        "action": "LOAD-AIRPLANE"
      },
      {
        "domain": "Rover",
        "action": "drop"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"sample_soil\" will have a rover sample soil into a store at a waypoint if the waypoint is at a soil sample and the store is empty.\n\nPDDL Action:\n(:action sample_soil\n    :parameters (?x - rover ?s - store ?p - waypoint)\n    :precondition (and (at ?x ?p) (at_soil_sample ?p) (equipped_for_soil_analysis ?x) (store_of ?s ?x) (empty ?s))\n    :effect (and (not (empty ?s)) (full ?s) (have_soil_analysis ?x ?p) (not (at_soil_sample ?p)))\n)Allowed Predicates:\n(in-city ?loc - place ?city - city) : a place loc in in a city.\n(at ?obj - physobj ?loc - place) : a physical object obj is at a place loc. \n(in ?pkg - package ?veh - vehicle) : a package pkg is in a vehicle veh.\n\nInput:\nThe action, \"LOAD-AIRPLANE\" will load an airplane with a package at a given place if the package is at the location.\n\nPDDL Action:\n(:action LOAD-AIRPLANE\n    :parameters (?pkg - package ?airplane - airplane ?loc - place)\n    :precondition (and (at ?pkg ?loc) (at ?airplane ?loc))\n    :effect (and (not (at ?pkg ?loc)) (in ?pkg ?airplane))\n)Allowed Predicates:\n(at ?x - rover ?y - waypoint) : the rover x is at waypoint y.\n(at_lander ?x - lander ?y - waypoint) : the lander x is at waypoint y.\n(can_traverse ?r - rover ?x - waypoint ?y - waypoint) : the rover r can traverse from waypoint x to waypoint y.\n(equipped_for_soil_analysis ?r - rover) : the rover r is equipped for soil analysis.\n(equipped_for_rock_analysis ?r - rover) : the rover r is equipped for rock analysis.\n(equipped_for_imaging ?r - rover) : the rover r is equipped for imaging.\n(empty ?s - store) : store s is empty.\n(have_rock_analysis ?r - rover ?w - waypoint) : the rover r has rock analysis at waypoint w.\n(have_soil_analysis ?r - rover ?w - waypoint) : the rover r has soil analysis at waypoint w.\n(full ?s - store) : the store s is full.\n(calibrated ?c - camera ?r - rover) : the camera c is calibrated on rover r.\n(supports ?c - camera ?m - mode) : the camera c supports mode m.\n(available ?r - rover) : rover r is available.\n(visible ?w - waypoint ?p - waypoint) : waypoint w is visible from waypoint p.\n(have_image ?r - rover ?o - objective ?m - mode) : the rover r has an image of objective o in mode m.\n(communicated_soil_data ?w - waypoint) : soil data has been communicated from waypoint w.\n(communicated_rock_data ?w - waypoint) : rock data has been communicated from waypoint w.\n(communicated_image_data ?o - objective ?m - mode) : image data of objective o has been communicated in mode m.\n(at_soil_sample ?w - waypoint) : waypoint w is at a soil at a soil sample. \n(at_rock_sample ?w - waypoint) : waypoint w is at a rock rock sample.\n(visible_from ?o - objective ?w - waypoint) : objective o is visible from waypoint w.\n(store_of ?s - store ?r - rover) : store s is a store of rover r.\n(calibration_target ?i - camera ?o - objective) : objective o is a calibration target for camera i.\n(on_board ?i - camera ?r - rover) : camera i is on board rover r.\n(channel_free ?l - lander) : lander l has a free channel. \n\nInput:\nThe action, \"drop\" will empty any items in a store from a rover if the store is full.\n\nPDDL Action:\n(:action drop\n    :parameters (?x - rover ?y - store)\n    :precondition (and (store_of ?y ?x) (full ?y))\n    :effect (and (not (full ?y)) (empty ?y))\n)\n\nAllowed Predicates:\n(at ?loc - location) : the deliverer is at location loc. \n(isHomeBase ?loc - location) : the location loc is the home base of the deliverer.\n(satisfied ?loc - location) : the location loc is satisfied.\n(wantsPaper ?loc - location) : the location loc wants a paper.\n(safe ?loc - location) : the location loc is safe.\n(unpacked ?p - paper) : the paper p is unpacked.\n(carrying ?p - paper) : the paper p is being carried.\n\nInput:\nThe action, \"deliver\" will have the deliverer drop off a paper in a location if the deliverer is carrying the paper.\n\nPDDL Action:",
    "results": []
  },
  {
    "domain": "trapnewspapers",
    "action": "deliver",
    "pddl": "(:action deliver\n    :parameters (?paper - paper ?loc - location)\n    :precondition (and (at ?loc) (carrying ?paper))\n    :effect (and (not (carrying ?paper)) (not (wantsPaper ?loc)) (satisfied ?loc))\n)",
    "class": "Base",
    "context": [
      {
        "domain": "track-building",
        "action": "move-agent"
      },
      {
        "domain": "gripper-typed",
        "action": "pick"
      },
      {
        "domain": "hiking",
        "action": "climb"
      }
    ],
    "prompt": "Given a description of an action in some domain, convert it to Planning Domain\nDefinition Language (PDDL) action. You may only use the allowed predicates\nprovided for each action.\n\nAllowed Predicates:\n(agent-at ?loc - location) : the agent is at the location loc.\n(train-at ?loc - location) : the train is at the location loc.\n(has-track ?loc - location) : the location loc has track.\n(forward ?loc1 - location ?loc2 - location) : the location loc2 is ahead of location loc1.\n\nInput:\nThe action, \"move-agent\" will move an agent from a location current-loc to a location next-loc.\n\nPDDL Action:\n(:action move-agent\n    :parameters (?current-loc - location ?next-loc - location)\n    :precondition (agent-at ?current-loc)\n    :effect (and (agent-at ?next-loc) (not (agent-at ?current-loc)))\n)Allowed Predicates:\n(at-robby ?r - room) : the robot robby is at the room r.\n(at ?b - ball ?r - room) : the ball b is at the room r.\n(free ?g - gripper) : the gripper g is free.\n(carry ?o - ball ?g - gripper) : gripper g is carrying ball g.\n\nInput:\nThe action, \"pick\" will have the robot pick up a ball in a room using a gripper.\n\nPDDL Action:\n(:action pick\n    :parameters (?obj - ball ?room - room ?gripper - gripper)\n    :precondition (and (at ?obj ?room) (at-robby ?room) (free ?gripper))\n    :effect (and (carry ?obj ?gripper) (not (at ?obj ?room)) (not (free ?gripper)))\n)Allowed Predicates:\n(at ?loc - location) : the hikers are at the location loc.\n(isWater ?loc - location) : the location loc is water.\n(isHill ?loc - location) : the location loc is a hill.\n(adjacent ?loc1 - location ?loc2 - location) : location loc1 is adjacent to location loc2.\n(onTrail ?from - location ?to - location) : the hikers are on the trail from location from to location to.\n\nInput:\nThe action, \"climb\" will have the hikers at a location climb to another location..\n\nPDDL Action:\n(:action climb\n    :parameters (?from - location ?to - location)\n    :precondition (and (isHill ?to) (at ?from) (adjacent ?from ?to) (not (isWater ?from)))\n    :effect (and (at ?to) (not (at ?from)))\n)\n\nAllowed Predicates:\n(at ?loc - location) : the deliverer is at location loc. \n(isHomeBase ?loc - location) : the location loc is the home base of the deliverer.\n(satisfied ?loc - location) : the location loc is satisfied.\n(wantsPaper ?loc - location) : the location loc wants a paper.\n(safe ?loc - location) : the location loc is safe.\n(unpacked ?p - paper) : the paper p is unpacked.\n(carrying ?p - paper) : the paper p is being carried.\n\nInput:\nThe action, \"deliver\" will have the deliverer drop off a paper in a location.\n\nPDDL Action:",
    "results": []
  }
]