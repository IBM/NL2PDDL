domain,action,pddl,preds,NL
BLOCKS,put-down,"(:action put-down
    :parameters (?x - block)
    :precondition (holding ?x)
    :effect (and (not (holding ?x)) (clear ?x) (handempty) (ontable ?x))
)",(holding x),if the block is being held.
BLOCKS,pick-up,"(:action pick-up
    :parameters (?x - block)
    :precondition (and (clear ?x) (ontable ?x) (handempty))
    :effect (and (not (ontable ?x)) (not (clear ?x)) (not (handempty)) (holding ?x))
)",(ontable x) (clear x) (handempty),if the block is on the table clear and the hand is empty.
BLOCKS,unstack,"(:action unstack
    :parameters (?x - block ?y - block)
    :precondition (and (on ?x ?y) (clear ?x) (handempty))
    :effect (and (holding ?x) (clear ?y) (not (clear ?x)) (not (handempty)) (not (on ?x ?y)))
)",(clear x) (on x y) (handempty),"if the block x is clear, ontop of y, and the hand is empty."
BLOCKS,stack,"(:action stack
    :parameters (?x - block ?y - block)
    :precondition (and (holding ?x) (clear ?y))
    :effect (and (not (holding ?x)) (not (clear ?y)) (clear ?x) (handempty) (on ?x ?y))
)",(clear y) (holding x),if the block y is clear and the hand is holding the block x.
Depot,Drive,"(:action Drive
    :parameters (?x - truck ?y - place ?z - place)
    :precondition (at ?x ?y)
    :effect (and (not (at ?x ?y)) (at ?x ?z))
)",(at x y),if the truck is at the location.
Depot,Load,"(:action Load
    :parameters (?x - hoist ?y - crate ?z - truck ?p - place)
    :precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))
    :effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x))
)",(lifting x y),if the hoist is lifting the crate.
Depot,Drop,"(:action Drop
    :parameters (?x - hoist ?y - crate ?z - surface ?p - place)
    :precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))
    :effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y) (on ?y ?z))
)",(lifting x y) (clear z),if the hoist is lifting the crate and the surface is clear.
Depot,Lift,"(:action Lift
    :parameters (?x - hoist ?y - crate ?z - surface ?p - place)
    :precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))
    :effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) (clear ?z) (not (on ?y ?z)))
)",(at y p) (on y z) (available x) (clear y),"if the crate is on the surface, clear, and at the location and the hoist is available."
Depot,Unload,"(:action Unload
    :parameters (?x - hoist ?y - crate ?z - truck ?p - place)
    :precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))
    :effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y))
)",(available x) (in y z),if the hoist is available and the crate is in the truck.
gripper-typed,drop,"(:action drop
    :parameters (?obj - ball ?room - room ?gripper - gripper)
    :precondition (and (carry ?obj ?gripper) (at-robby ?room))
    :effect (and (at ?obj ?room) (free ?gripper) (not (carry ?obj ?gripper)))
)",(carry obj gripper),if the ball is being caried by the gripper.
gripper-typed,move,"(:action move
    :parameters (?from - room ?to - room)
    :precondition (at-robby ?from)
    :effect (and (at-robby ?to) (not (at-robby ?from)))
)",(at-robby from),if the robot robby is in the initial room.
gripper-typed,pick,"(:action pick
    :parameters (?obj - ball ?room - room ?gripper - gripper)
    :precondition (and (at ?obj ?room) (at-robby ?room) (free ?gripper))
    :effect (and (carry ?obj ?gripper) (not (at ?obj ?room)) (not (free ?gripper)))
)",(free gripper) (at obj room),if the gripper is free and the ball is in the room.
heavy-pack,pack-first,"(:action pack-first
    :parameters (?item - item)
    :precondition (box-empty)
    :effect (and (not (box-empty)) (packed ?item) (nothing-above ?item) (not (unpacked ?item)))
)",(box-empty),if the box is empty.
heavy-pack,stack,"(:action stack
    :parameters (?bottom - item ?top - item)
    :precondition (and (packed ?bottom) (nothing-above ?bottom) (heavier ?bottom ?top) (unpacked ?top))
    :effect (and (packed ?top) (nothing-above ?top) (not (nothing-above ?bottom)) (not (unpacked ?top)))
)",(nothing-above bottom) (unpacked top),if nothing is above the item in the box and the item being placed ontop is unpacked.
logistics,DRIVE-TRUCK,"(:action DRIVE-TRUCK
    :parameters (?truck - truck ?loc-from - place ?loc-to - place ?city - city)
    :precondition (and (at ?truck ?loc-from) (in-city ?loc-from ?city) (in-city ?loc-to ?city))
    :effect (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to))
)",(at truck loc-from),if the truck is at the first place.
logistics,LOAD-TRUCK,"(:action LOAD-TRUCK
    :parameters (?pkg - package ?truck - truck ?loc - place)
    :precondition (and (at ?truck ?loc) (at ?pkg ?loc))
    :effect (and (not (at ?pkg ?loc)) (in ?pkg ?truck))
)",(at pkg loc),if the package is at the place.
logistics,UNLOAD-TRUCK,"(:action UNLOAD-TRUCK
    :parameters (?pkg - package ?truck - truck ?loc - place)
    :precondition (and (at ?truck ?loc) (in ?pkg ?truck))
    :effect (and (not (in ?pkg ?truck)) (at ?pkg ?loc))
)",(in pkg truck),if the package is in the truck.
logistics,FLY-AIRPLANE,"(:action FLY-AIRPLANE
    :parameters (?airplane - airplane ?loc-from - airport ?loc-to - airport)
    :precondition (at ?airplane ?loc-from)
    :effect (and (not (at ?airplane ?loc-from)) (at ?airplane ?loc-to))
)",(at airplane loc-from),if the airplane is at the first airport.
logistics,UNLOAD-AIRPLANE,"(:action UNLOAD-AIRPLANE
    :parameters (?pkg - package ?airplane - airplane ?loc - place)
    :precondition (and (in ?pkg ?airplane) (at ?airplane ?loc))
    :effect (and (not (in ?pkg ?airplane)) (at ?pkg ?loc))
)",(in pkg airplane),if the package is in the airplane.
logistics,LOAD-AIRPLANE,"(:action LOAD-AIRPLANE
    :parameters (?pkg - package ?airplane - airplane ?loc - place)
    :precondition (and (at ?pkg ?loc) (at ?airplane ?loc))
    :effect (and (not (at ?pkg ?loc)) (in ?pkg ?airplane))
)",(at pkg loc),if the package is at the location.
hiking,climb,"(:action climb
    :parameters (?from - location ?to - location)
    :precondition (and (isHill ?to) (at ?from) (adjacent ?from ?to) (not (isWater ?from)))
    :effect (and (at ?to) (not (at ?from)))
)",(at from),if the hikers are at the first location.
hiking,walk,"(:action walk
    :parameters (?from - location ?to - location)
    :precondition (and (not (isHill ?to)) (at ?from) (adjacent ?from ?to) (not (isWater ?from)))
    :effect (and (at ?to) (not (at ?from)))
)",(at from),if the hikers are at the first location.
miconic,down,"(:action down
    :parameters (?f1 - floor ?f2 - floor)
    :precondition (and (lift-at ?f1) (above ?f2 ?f1))
    :effect (and (lift-at ?f2) (not (lift-at ?f1)))
)",(lift-at f1),if the lift is at f1.
miconic,depart,"(:action depart
    :parameters (?f - floor ?p - passenger)
    :precondition (and (lift-at ?f) (destin ?p ?f) (boarded ?p))
    :effect (and (not (boarded ?p)) (served ?p))
)",(boarded p),if the passanger has boarded the lift.
miconic,board,"(:action board
    :parameters (?f - floor ?p - passenger)
    :precondition (and (lift-at ?f) (origin ?p ?f))
    :effect (and (boarded ?p))
)",,.
miconic,up,"(:action up
    :parameters (?f1 - floor ?f2 - floor)
    :precondition (and (lift-at ?f1) (above ?f1 ?f2))
    :effect (and (lift-at ?f2) (not (lift-at ?f1)))
)",(lift-at f1),if the lift is at floor 1.
track-building,move-train,"(:action move-train
    :parameters (?current-loc - location ?next-loc - location)
    :precondition (and (train-at ?current-loc) (has-track ?next-loc) (forward ?current-loc ?next-loc))
    :effect (and (train-at ?next-loc) (not (train-at ?current-loc)))
)",(train-at current-loc),if the train is at the current location.
track-building,build-track,"(:action build-track
    :parameters (?loc - location)
    :precondition (agent-at ?loc)
    :effect (and (has-track ?loc))
)",,.
track-building,move-agent,"(:action move-agent
    :parameters (?current-loc - location ?next-loc - location)
    :precondition (agent-at ?current-loc)
    :effect (and (agent-at ?next-loc) (not (agent-at ?current-loc)))
)",(agent-at current-loc),if the agent is at the current location.
trapnewspapers,pick-up,"(:action pick-up
    :parameters (?paper - paper ?loc - location)
    :precondition (and (at ?loc) (isHomeBase ?loc) (unpacked ?paper))
    :effect (and (not (unpacked ?paper)) (carrying ?paper))
)",(unpacked paper),if the paper is unpacked.
trapnewspapers,move,"(:action move
    :parameters (?from - location ?to - location)
    :precondition (and (at ?from) (safe ?from))
    :effect (and (not (at ?from)) (at ?to))
)",(at from),"if the deliverer is at the ""from"" location."
trapnewspapers,deliver,"(:action deliver
    :parameters (?paper - paper ?loc - location)
    :precondition (and (at ?loc) (carrying ?paper))
    :effect (and (not (carrying ?paper)) (not (wantsPaper ?loc)) (satisfied ?loc))
)",(carrying paper),if the deliverer is carrying the paper.
